Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/pytorch, Date: 23/03/2020 06:38:09
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: f644f97794de903a580dff2b305318ea2effefec
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7fa2396bdef0>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: -50.424 [4.425], Avg: -50.424 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -47.294 [4.679], Avg: -48.859 (1.0000) <0-00:08:28> 
Step:    2000, Reward: -45.503 [5.422], Avg: -47.74 (1.0000) <0-00:16:30> 
Step:    3000, Reward: -43.28 [5.854], Avg: -46.625 (1.0000) <0-00:24:35> 
Step:    4000, Reward: -45.098 [3.837], Avg: -46.32 (1.0000) <0-00:32:23> 
Step:    5000, Reward: -42.796 [3.733], Avg: -45.732 (1.0000) <0-00:40:21> 
Step:    6000, Reward: -45.319 [3.807], Avg: -45.673 (1.0000) <0-00:48:34> 
Step:    7000, Reward: -41.015 [3.751], Avg: -45.091 (1.0000) <0-00:56:35> 
Step:    8000, Reward: -41.236 [4.853], Avg: -44.663 (1.0000) <0-01:04:33> 
Step:    9000, Reward: -42.138 [4.429], Avg: -44.41 (1.0000) <0-01:12:49> 
Step:   10000, Reward: -38.107 [3.942], Avg: -43.837 (1.0000) <0-01:20:49> 
Step:   11000, Reward: -37.187 [5.201], Avg: -43.283 (1.0000) <0-01:28:51> 
Step:   12000, Reward: -37.934 [4.897], Avg: -42.872 (1.0000) <0-01:36:42> 
Step:   13000, Reward: -36.538 [5.036], Avg: -42.419 (1.0000) <0-01:44:34> 
Step:   14000, Reward: -33.95 [4.390], Avg: -41.855 (1.0000) <0-01:52:38> 
Step:   15000, Reward: -33.564 [5.619], Avg: -41.336 (1.0000) <0-02:00:42> 
Step:   16000, Reward: -30.202 [5.127], Avg: -40.681 (1.0000) <0-02:08:52> 
Step:   17000, Reward: -30.023 [7.132], Avg: -40.089 (1.0000) <0-02:16:38> 
Step:   18000, Reward: -28.596 [6.533], Avg: -39.484 (1.0000) <0-02:24:31> 
Step:   19000, Reward: -33.781 [4.609], Avg: -39.199 (1.0000) <0-02:32:23> 
Step:   20000, Reward: -32.696 [6.087], Avg: -38.89 (1.0000) <0-02:40:25> 
Step:   21000, Reward: -29.105 [6.552], Avg: -38.445 (1.0000) <0-02:48:23> 
Step:   22000, Reward: -28.835 [5.299], Avg: -38.027 (1.0000) <0-02:56:25> 
Step:   23000, Reward: -28.213 [6.457], Avg: -37.618 (1.0000) <0-03:04:25> 
Step:   24000, Reward: -28.152 [7.748], Avg: -37.239 (1.0000) <0-03:12:19> 
Step:   25000, Reward: -28.284 [6.487], Avg: -36.895 (1.0000) <0-03:20:18> 
Step:   26000, Reward: -26.901 [7.913], Avg: -36.525 (1.0000) <0-03:28:25> 
Step:   27000, Reward: -25.848 [8.992], Avg: -36.144 (1.0000) <0-03:36:15> 
Step:   28000, Reward: -32.053 [6.016], Avg: -36.002 (1.0000) <0-03:44:12> 
Step:   29000, Reward: -29.468 [8.696], Avg: -35.785 (1.0000) <0-03:52:25> 
Step:   30000, Reward: -33.749 [5.295], Avg: -35.719 (1.0000) <0-04:00:38> 
Step:   31000, Reward: -26.03 [11.413], Avg: -35.416 (1.0000) <0-04:08:42> 
Step:   32000, Reward: -32.182 [8.125], Avg: -35.318 (1.0000) <0-04:16:45> 
Step:   33000, Reward: -27.668 [13.793], Avg: -35.093 (1.0000) <0-04:24:43> 
Step:   34000, Reward: -34.029 [10.463], Avg: -35.063 (1.0000) <0-04:33:03> 
Step:   35000, Reward: -31.508 [8.259], Avg: -34.964 (1.0000) <0-04:41:13> 
Step:   36000, Reward: -29.481 [15.441], Avg: -34.816 (1.0000) <0-04:49:28> 
Step:   37000, Reward: -24.246 [15.237], Avg: -34.538 (1.0000) <0-04:57:36> 
Step:   38000, Reward: -27.135 [17.983], Avg: -34.348 (1.0000) <0-05:05:46> 
Step:   39000, Reward: -26.282 [14.392], Avg: -34.146 (1.0000) <0-05:13:55> 
Step:   40000, Reward: -30.159 [11.549], Avg: -34.049 (1.0000) <0-05:21:49> 
Step:   41000, Reward: -35.08 [8.743], Avg: -34.074 (1.0000) <0-05:29:48> 
Step:   42000, Reward: -25.446 [18.178], Avg: -33.873 (1.0000) <0-05:37:59> 
Step:   43000, Reward: -22.676 [21.830], Avg: -33.618 (1.0000) <0-05:46:03> 
Step:   44000, Reward: -30.502 [12.521], Avg: -33.549 (1.0000) <0-05:54:26> 
Step:   45000, Reward: -30.032 [10.069], Avg: -33.473 (1.0000) <0-06:02:31> 
Step:   46000, Reward: -31.646 [12.901], Avg: -33.434 (1.0000) <0-06:10:45> 
Step:   47000, Reward: -30.975 [11.219], Avg: -33.383 (1.0000) <0-06:18:48> 
Step:   48000, Reward: -30.432 [9.155], Avg: -33.322 (1.0000) <0-06:26:52> 
Step:   49000, Reward: -29.838 [11.165], Avg: -33.253 (1.0000) <0-06:34:57> 
Step:   50000, Reward: -35.615 [5.178], Avg: -33.299 (1.0000) <0-06:43:06> 
Step:   51000, Reward: -35.431 [5.892], Avg: -33.34 (1.0000) <0-06:51:51> 
Step:   52000, Reward: -37.91 [8.853], Avg: -33.426 (1.0000) <0-06:59:57> 
Step:   53000, Reward: -42.947 [4.809], Avg: -33.603 (1.0000) <0-07:07:51> 
Step:   54000, Reward: -41.703 [8.951], Avg: -33.75 (1.0000) <0-07:15:45> 
Step:   55000, Reward: -42.935 [8.156], Avg: -33.914 (1.0000) <0-07:23:56> 
Step:   56000, Reward: -44.81 [9.210], Avg: -34.105 (1.0000) <0-07:32:00> 
Step:   57000, Reward: -38.887 [8.828], Avg: -34.187 (1.0000) <0-07:40:00> 
Step:   58000, Reward: -40.343 [8.896], Avg: -34.292 (1.0000) <0-07:48:01> 
Step:   59000, Reward: -38.736 [7.588], Avg: -34.366 (1.0000) <0-07:56:46> 
Step:   60000, Reward: -41.093 [17.266], Avg: -34.476 (1.0000) <0-08:05:03> 
Step:   61000, Reward: -46.671 [12.109], Avg: -34.673 (1.0000) <0-08:13:16> 
Step:   62000, Reward: -42.414 [7.850], Avg: -34.796 (1.0000) <0-08:20:48> 
Step:   63000, Reward: -41.324 [10.924], Avg: -34.898 (1.0000) <0-08:28:23> 
Step:   64000, Reward: -47.732 [8.842], Avg: -35.095 (1.0000) <0-08:35:58> 
Step:   65000, Reward: -44.984 [9.963], Avg: -35.245 (1.0000) <0-08:44:12> 
Step:   66000, Reward: -43.924 [9.248], Avg: -35.375 (1.0000) <0-08:52:14> 
Step:   67000, Reward: -47.684 [7.856], Avg: -35.556 (1.0000) <0-09:00:20> 
Step:   68000, Reward: -44.626 [8.142], Avg: -35.687 (1.0000) <0-09:08:39> 
Step:   69000, Reward: -46.603 [6.570], Avg: -35.843 (1.0000) <0-09:16:16> 
Step:   70000, Reward: -43.938 [5.789], Avg: -35.957 (1.0000) <0-09:24:07> 
Step:   71000, Reward: -48.581 [8.842], Avg: -36.132 (1.0000) <0-09:32:06> 
Step:   72000, Reward: -49.783 [7.497], Avg: -36.319 (1.0000) <0-09:40:03> 
Step:   73000, Reward: -52.07 [5.128], Avg: -36.532 (1.0000) <0-09:48:15> 
Step:   74000, Reward: -51.304 [7.373], Avg: -36.729 (1.0000) <0-09:56:17> 
Step:   75000, Reward: -52.908 [7.209], Avg: -36.942 (1.0000) <0-10:04:40> 
Step:   76000, Reward: -50.952 [6.569], Avg: -37.124 (1.0000) <0-10:12:55> 
Step:   77000, Reward: -52.024 [6.800], Avg: -37.315 (1.0000) <0-10:21:11> 
Step:   78000, Reward: -54.583 [6.865], Avg: -37.534 (1.0000) <0-10:29:18> 
Step:   79000, Reward: -54.62 [6.358], Avg: -37.747 (1.0000) <0-10:37:39> 
Step:   80000, Reward: -57.958 [5.616], Avg: -37.997 (1.0000) <0-10:45:41> 
Step:   81000, Reward: -56.155 [7.162], Avg: -38.218 (1.0000) <0-10:53:52> 
Step:   82000, Reward: -55.88 [6.088], Avg: -38.431 (1.0000) <0-11:01:52> 
Step:   83000, Reward: -56.598 [6.816], Avg: -38.647 (1.0000) <0-11:09:58> 
Step:   84000, Reward: -57.329 [6.135], Avg: -38.867 (1.0000) <0-11:18:08> 
Step:   85000, Reward: -56.022 [7.511], Avg: -39.066 (1.0000) <0-11:26:36> 
Step:   86000, Reward: -55.538 [5.595], Avg: -39.256 (1.0000) <0-11:34:33> 
Step:   87000, Reward: -56.908 [4.784], Avg: -39.456 (1.0000) <0-11:42:42> 
Step:   88000, Reward: -56.116 [7.287], Avg: -39.644 (1.0000) <0-11:50:55> 
Step:   89000, Reward: -65.316 [35.147], Avg: -39.929 (1.0000) <0-11:59:06> 
Step:   90000, Reward: -56.918 [7.839], Avg: -40.115 (1.0000) <0-12:07:19> 
Step:   91000, Reward: -65.899 [24.914], Avg: -40.396 (1.0000) <0-12:15:21> 
Step:   92000, Reward: -50.938 [8.714], Avg: -40.509 (1.0000) <0-12:23:07> 
Step:   93000, Reward: -63.596 [21.454], Avg: -40.755 (1.0000) <0-12:31:32> 
