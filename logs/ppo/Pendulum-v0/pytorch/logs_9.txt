Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: Pendulum-v0/pytorch, Date: 22/03/2020 02:11:57
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 605e7742be94b5e71647b1eb63330b89482c7bf2
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7f2042b46e10>,

import gym
import torch
import pickle
import argparse
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, ADVANTAGE_DECAY, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name="ppo")

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, importances=torch.tensor(1.0), clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_error = values - targets
		critic_loss = importances.to(self.device) * critic_error.pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())
		return critic_error.cpu().detach().numpy().squeeze(-1)

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage, scale=16*dones.size(0)/len(self.replay_buffer))
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}/"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)

Step:       0, Reward: -1360.829 [226.226], Avg: -1360.829 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1340.266 [269.142], Avg: -1350.548 (1.0000) <0-00:00:07> 
Step:    2000, Reward: -1208.002 [188.165], Avg: -1303.032 (1.0000) <0-00:00:14> 
Step:    3000, Reward: -1215.203 [167.870], Avg: -1281.075 (1.0000) <0-00:00:21> 
Step:    4000, Reward: -1218.861 [291.234], Avg: -1268.632 (1.0000) <0-00:00:28> 
Step:    5000, Reward: -1183.266 [196.592], Avg: -1254.404 (1.0000) <0-00:00:35> 
Step:    6000, Reward: -1036.9 [113.451], Avg: -1223.332 (1.0000) <0-00:00:42> 
Step:    7000, Reward: -1061.262 [168.961], Avg: -1203.074 (1.0000) <0-00:00:49> 
Step:    8000, Reward: -924.562 [167.921], Avg: -1172.128 (1.0000) <0-00:00:56> 
Step:    9000, Reward: -1008.52 [115.328], Avg: -1155.767 (1.0000) <0-00:01:03> 
Step:   10000, Reward: -990.821 [115.915], Avg: -1140.772 (1.0000) <0-00:01:10> 
Step:   11000, Reward: -907.303 [67.246], Avg: -1121.316 (1.0000) <0-00:01:17> 
Step:   12000, Reward: -909.776 [85.414], Avg: -1105.044 (1.0000) <0-00:01:24> 
Step:   13000, Reward: -942.802 [92.239], Avg: -1093.455 (1.0000) <0-00:01:31> 
Step:   14000, Reward: -922.44 [92.785], Avg: -1082.054 (1.0000) <0-00:01:38> 
Step:   15000, Reward: -914.55 [74.238], Avg: -1071.585 (1.0000) <0-00:01:45> 
Step:   16000, Reward: -897.785 [75.954], Avg: -1061.362 (1.0000) <0-00:01:53> 
Step:   17000, Reward: -815.515 [99.289], Avg: -1047.703 (1.0000) <0-00:02:00> 
Step:   18000, Reward: -800.334 [105.900], Avg: -1034.684 (1.0000) <0-00:02:07> 
Step:   19000, Reward: -784.844 [113.565], Avg: -1022.192 (1.0000) <0-00:02:14> 
Step:   20000, Reward: -719.289 [87.580], Avg: -1007.768 (1.0000) <0-00:02:21> 
Step:   21000, Reward: -687.481 [124.822], Avg: -993.21 (1.0000) <0-00:02:28> 
Step:   22000, Reward: -655.075 [112.322], Avg: -978.508 (1.0000) <0-00:02:35> 
Step:   23000, Reward: -618.917 [134.265], Avg: -963.525 (1.0000) <0-00:02:42> 
Step:   24000, Reward: -556.096 [118.948], Avg: -947.228 (1.0000) <0-00:02:50> 
Step:   25000, Reward: -363.429 [152.096], Avg: -924.774 (1.0000) <0-00:02:57> 
Step:   26000, Reward: -449.496 [175.246], Avg: -907.171 (1.0000) <0-00:03:04> 
Step:   27000, Reward: -308.867 [132.711], Avg: -885.803 (1.0000) <0-00:03:11> 
Step:   28000, Reward: -165.26 [114.712], Avg: -860.957 (1.0000) <0-00:03:19> 
Step:   29000, Reward: -214.998 [123.888], Avg: -839.425 (1.0000) <0-00:03:26> 
Step:   30000, Reward: -192.257 [120.778], Avg: -818.549 (1.0000) <0-00:03:33> 
Step:   31000, Reward: -202.733 [140.797], Avg: -799.304 (1.0000) <0-00:03:40> 
Step:   32000, Reward: -200.967 [93.444], Avg: -781.173 (1.0000) <0-00:03:47> 
Step:   33000, Reward: -152.511 [95.026], Avg: -762.683 (1.0000) <0-00:03:54> 
Step:   34000, Reward: -155.845 [93.039], Avg: -745.345 (1.0000) <0-00:04:02> 
Step:   35000, Reward: -144.191 [74.295], Avg: -728.646 (1.0000) <0-00:04:09> 
Step:   36000, Reward: -176.209 [120.932], Avg: -713.715 (1.0000) <0-00:04:16> 
Step:   37000, Reward: -160.15 [79.756], Avg: -699.148 (1.0000) <0-00:04:24> 
Step:   38000, Reward: -145.943 [76.130], Avg: -684.963 (1.0000) <0-00:04:31> 
Step:   39000, Reward: -161.703 [102.895], Avg: -671.881 (1.0000) <0-00:04:38> 
Step:   40000, Reward: -207.773 [96.483], Avg: -660.562 (1.0000) <0-00:04:45> 
Step:   41000, Reward: -204.828 [110.242], Avg: -649.711 (1.0000) <0-00:04:52> 
Step:   42000, Reward: -243.02 [124.034], Avg: -640.253 (1.0000) <0-00:04:59> 
Step:   43000, Reward: -172.002 [111.659], Avg: -629.611 (1.0000) <0-00:05:06> 
Step:   44000, Reward: -137.539 [91.568], Avg: -618.676 (1.0000) <0-00:05:13> 
Step:   45000, Reward: -150.653 [111.999], Avg: -608.502 (1.0000) <0-00:05:21> 
Step:   46000, Reward: -144.611 [98.100], Avg: -598.632 (1.0000) <0-00:05:28> 
Step:   47000, Reward: -147.274 [69.481], Avg: -589.228 (1.0000) <0-00:05:35> 
Step:   48000, Reward: -166.397 [101.049], Avg: -580.599 (1.0000) <0-00:05:43> 
Step:   49000, Reward: -154.022 [115.856], Avg: -572.068 (1.0000) <0-00:05:50> 
Step:   50000, Reward: -131.4 [66.895], Avg: -563.427 (1.0000) <0-00:05:57> 
