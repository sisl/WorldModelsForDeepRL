Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: Pendulum-v0/pytorch, Date: 22/03/2020 00:27:25
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: b025925e1f9a3086994e1dac25e3b4ee44d689f2
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7fd952515cf8>,

import os
import math
import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, TARGET_UPDATE_RATE, NUM_STEPS, gsoftmax, one_hot

EPS_MIN = 0.020              	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.98             	# The rate at which eps decays from EPS_MAX to EPS_MIN
REPLAY_BATCH_SIZE = 128        	# How many experience tuples to sample from the buffer for each train step

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None): 
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name="ddpg")

	def get_action(self, state, use_target=False, grad=False, numpy=True, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=True):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, q_targets, importances=1):
		if self.actor_local.discrete: actions = one_hot(actions)
		q_values = self.critic_local(states, actions)
		critic_error = q_values - q_targets.detach()
		critic_loss = importances.to(self.device) * critic_error.pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())

		actor_action = self.actor_local(states)
		q_actions = self.critic_local(states, actor_action)
		actor_loss = -(q_actions - q_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		
		self.soft_copy(self.actor_local, self.actor_target)
		self.soft_copy(self.critic_local, self.critic_target)
		return critic_error.cpu().detach().numpy().squeeze(-1)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True, numpy=False).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			(states, actions, targets), indices, importances = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)
			errors = self.network.optimize(states, actions, targets, importances**(1-self.eps))
			self.replay_buffer.update_priorities(indices, errors)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}/"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)

Step:       0, Reward: -1222.878 [97.316], Avg: -1222.878 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1283.294 [163.193], Avg: -1253.086 (0.9039) <0-00:00:08> 
Step:    2000, Reward: -1177.902 [140.448], Avg: -1228.025 (0.8171) <0-00:00:18> 
Step:    3000, Reward: -1179.995 [171.764], Avg: -1216.017 (0.7386) <0-00:00:27> 
Step:    4000, Reward: -1253.258 [249.657], Avg: -1223.465 (0.6676) <0-00:00:37> 
Step:    5000, Reward: -950.795 [256.175], Avg: -1178.02 (0.6035) <0-00:00:46> 
Step:    6000, Reward: -684.3 [201.633], Avg: -1107.489 (0.5455) <0-00:00:55> 
Step:    7000, Reward: -612.81 [132.852], Avg: -1045.654 (0.4931) <0-00:01:05> 
Step:    8000, Reward: -360.476 [170.397], Avg: -969.523 (0.4457) <0-00:01:15> 
Step:    9000, Reward: -511.415 [469.938], Avg: -923.712 (0.4029) <0-00:01:24> 
Step:   10000, Reward: -290.235 [129.421], Avg: -866.123 (0.3642) <0-00:01:34> 
Step:   11000, Reward: -236.326 [129.758], Avg: -813.64 (0.3292) <0-00:01:43> 
Step:   12000, Reward: -254.626 [135.761], Avg: -770.639 (0.2976) <0-00:01:53> 
Step:   13000, Reward: -187.99 [114.605], Avg: -729.021 (0.2690) <0-00:02:04> 
Step:   14000, Reward: -146.528 [98.099], Avg: -690.189 (0.2431) <0-00:02:13> 
Step:   15000, Reward: -128.679 [69.344], Avg: -655.094 (0.2198) <0-00:02:24> 
Step:   16000, Reward: -179.264 [94.670], Avg: -627.104 (0.1986) <0-00:02:33> 
Step:   17000, Reward: -154.652 [116.781], Avg: -600.857 (0.1796) <0-00:02:43> 
Step:   18000, Reward: -148.214 [112.947], Avg: -577.034 (0.1623) <0-00:02:53> 
Step:   19000, Reward: -133.93 [80.649], Avg: -554.878 (0.1467) <0-00:03:03> 
Step:   20000, Reward: -144.627 [62.983], Avg: -535.343 (0.1326) <0-00:03:13> 
Step:   21000, Reward: -151.758 [107.049], Avg: -517.907 (0.1199) <0-00:03:22> 
Step:   22000, Reward: -159.01 [100.650], Avg: -502.303 (0.1084) <0-00:03:32> 
Step:   23000, Reward: -162.274 [68.408], Avg: -488.135 (0.0979) <0-00:03:42> 
Step:   24000, Reward: -139.352 [99.688], Avg: -474.184 (0.0885) <0-00:03:52> 
Step:   25000, Reward: -142.967 [93.202], Avg: -461.444 (0.0800) <0-00:04:01> 
Step:   26000, Reward: -150.08 [96.381], Avg: -449.912 (0.0723) <0-00:04:11> 
Step:   27000, Reward: -137.237 [83.688], Avg: -438.745 (0.0654) <0-00:04:21> 
Step:   28000, Reward: -126.2 [65.309], Avg: -427.968 (0.0591) <0-00:04:31> 
Step:   29000, Reward: -192.41 [76.598], Avg: -420.116 (0.0534) <0-00:04:41> 
Step:   30000, Reward: -131.926 [51.211], Avg: -410.82 (0.0483) <0-00:04:51> 
Step:   31000, Reward: -151.924 [50.603], Avg: -402.729 (0.0437) <0-00:05:01> 
Step:   32000, Reward: -178.594 [96.943], Avg: -395.937 (0.0395) <0-00:05:10> 
Step:   33000, Reward: -180.627 [64.687], Avg: -389.604 (0.0357) <0-00:05:20> 
Step:   34000, Reward: -153.989 [50.094], Avg: -382.873 (0.0322) <0-00:05:29> 
Step:   35000, Reward: -173.021 [84.217], Avg: -377.043 (0.0291) <0-00:05:40> 
Step:   36000, Reward: -138.903 [91.408], Avg: -370.607 (0.0263) <0-00:05:49> 
Step:   37000, Reward: -165.556 [113.479], Avg: -365.211 (0.0238) <0-00:05:59> 
Step:   38000, Reward: -169.094 [81.153], Avg: -360.182 (0.0215) <0-00:06:09> 
Step:   39000, Reward: -152.85 [95.329], Avg: -354.999 (0.0200) <0-00:06:19> 
Step:   40000, Reward: -139.306 [65.354], Avg: -349.738 (0.0200) <0-00:06:28> 
Step:   41000, Reward: -194.849 [82.135], Avg: -346.05 (0.0200) <0-00:06:38> 
Step:   42000, Reward: -184.21 [71.733], Avg: -342.287 (0.0200) <0-00:06:48> 
Step:   43000, Reward: -147.795 [76.697], Avg: -337.867 (0.0200) <0-00:06:57> 
Step:   44000, Reward: -145.413 [67.195], Avg: -333.59 (0.0200) <0-00:07:07> 
Step:   45000, Reward: -209.877 [83.536], Avg: -330.9 (0.0200) <0-00:07:17> 
Step:   46000, Reward: -125.213 [87.020], Avg: -326.524 (0.0200) <0-00:07:26> 
Step:   47000, Reward: -165.139 [60.826], Avg: -323.162 (0.0200) <0-00:07:37> 
Step:   48000, Reward: -190.434 [69.296], Avg: -320.453 (0.0200) <0-00:07:47> 
Step:   49000, Reward: -146.32 [109.915], Avg: -316.97 (0.0200) <0-00:07:56> 
Step:   50000, Reward: -178.2 [76.147], Avg: -314.249 (0.0200) <0-00:08:06> 
