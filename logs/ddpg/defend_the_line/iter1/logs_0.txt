Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: defend_the_line/iter1, Date: 22/03/2020 22:48:43
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: b19ecc9d85ff967409939649e274f3782e65a659
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [3],
action_space: Discrete(3),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7fe14da1dc50>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=True, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=True):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		if self.actor_local.discrete: actions = one_hot(actions)
		q_values = self.critic_local(states, actions)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.critic_local(states, actor_action)
		actor_loss = -(q_actions - q_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True, numpy=False).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: 5.438 [2.669], Avg: 5.438 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 6.562 [3.316], Avg: 6.0 (0.9604) <0-00:00:25> 
Step:    2000, Reward: 6.625 [2.571], Avg: 6.208 (0.9039) <0-00:00:54> 
Step:    3000, Reward: 6.5 [3.279], Avg: 6.281 (0.8681) <0-00:01:22> 
Step:    4000, Reward: 6.688 [2.311], Avg: 6.363 (0.8337) <0-00:01:51> 
Step:    5000, Reward: 5.875 [4.400], Avg: 6.281 (0.7847) <0-00:02:21> 
Step:    6000, Reward: 8.312 [3.669], Avg: 6.571 (0.7536) <0-00:02:51> 
Step:    7000, Reward: 7.312 [3.386], Avg: 6.664 (0.7238) <0-00:03:21> 
Step:    8000, Reward: 6.0 [2.669], Avg: 6.59 (0.6812) <0-00:03:50> 
Step:    9000, Reward: 8.312 [4.058], Avg: 6.762 (0.6543) <0-00:04:20> 
Step:   10000, Reward: 7.438 [3.201], Avg: 6.824 (0.6283) <0-00:04:48> 
Step:   11000, Reward: 7.938 [3.325], Avg: 6.917 (0.6158) <0-00:05:18> 
Step:   12000, Reward: 7.812 [2.941], Avg: 6.986 (0.5914) <0-00:05:48> 
Step:   13000, Reward: 7.688 [3.097], Avg: 7.036 (0.5796) <0-00:06:19> 
Step:   14000, Reward: 9.688 [4.857], Avg: 7.213 (0.5566) <0-00:06:51> 
Step:   15000, Reward: 8.0 [4.301], Avg: 7.262 (0.5346) <0-00:07:21> 
Step:   16000, Reward: 10.0 [4.016], Avg: 7.423 (0.5239) <0-00:07:53> 
Step:   17000, Reward: 10.625 [4.014], Avg: 7.601 (0.5031) <0-00:08:25> 
Step:   18000, Reward: 10.688 [5.620], Avg: 7.763 (0.4931) <0-00:09:00> 
Step:   19000, Reward: 10.0 [4.301], Avg: 7.875 (0.4641) <0-00:09:32> 
Step:   20000, Reward: 12.938 [3.363], Avg: 8.116 (0.4548) <0-00:10:05> 
Step:   21000, Reward: 11.75 [4.737], Avg: 8.281 (0.4368) <0-00:10:38> 
Step:   22000, Reward: 14.938 [5.595], Avg: 8.571 (0.4195) <0-00:11:18> 
Step:   23000, Reward: 12.5 [4.583], Avg: 8.734 (0.4029) <0-00:11:56> 
Step:   24000, Reward: 11.375 [5.925], Avg: 8.84 (0.3869) <0-00:12:36> 
Step:   25000, Reward: 12.25 [4.670], Avg: 8.971 (0.3716) <0-00:13:16> 
Step:   26000, Reward: 12.5 [6.481], Avg: 9.102 (0.3642) <0-00:14:03> 
Step:   27000, Reward: 11.5 [3.298], Avg: 9.188 (0.3569) <0-00:14:39> 
Step:   28000, Reward: 10.625 [4.470], Avg: 9.237 (0.3497) <0-00:15:17> 
Step:   29000, Reward: 11.5 [4.962], Avg: 9.313 (0.3292) <0-00:15:56> 
Step:   30000, Reward: 12.5 [5.612], Avg: 9.415 (0.3226) <0-00:16:38> 
Step:   31000, Reward: 13.562 [4.609], Avg: 9.545 (0.3161) <0-00:17:18> 
Step:   32000, Reward: 14.938 [5.093], Avg: 9.708 (0.3036) <0-00:17:57> 
Step:   33000, Reward: 13.688 [6.232], Avg: 9.825 (0.2976) <0-00:18:39> 
Step:   34000, Reward: 12.688 [4.369], Avg: 9.907 (0.2916) <0-00:19:20> 
Step:   35000, Reward: 18.062 [5.006], Avg: 10.134 (0.2801) <0-00:20:01> 
Step:   36000, Reward: 16.125 [6.304], Avg: 10.296 (0.2745) <0-00:20:42> 
Step:   37000, Reward: 16.5 [3.657], Avg: 10.459 (0.2636) <0-00:21:22> 
Step:   38000, Reward: 17.375 [5.349], Avg: 10.636 (0.2583) <0-00:22:06> 
Step:   39000, Reward: 17.812 [5.876], Avg: 10.816 (0.2531) <0-00:22:49> 
Step:   40000, Reward: 15.125 [3.967], Avg: 10.921 (0.2531) <0-00:23:28> 
Step:   41000, Reward: 12.938 [3.010], Avg: 10.969 (0.2431) <0-00:24:05> 
Step:   42000, Reward: 14.938 [4.630], Avg: 11.061 (0.2383) <0-00:24:46> 
Step:   43000, Reward: 15.375 [6.735], Avg: 11.159 (0.2288) <0-00:25:34> 
Step:   44000, Reward: 14.875 [2.546], Avg: 11.242 (0.2288) <0-00:26:13> 
Step:   45000, Reward: 14.062 [4.394], Avg: 11.303 (0.2198) <0-00:26:55> 
Step:   46000, Reward: 15.75 [4.562], Avg: 11.398 (0.2154) <0-00:27:39> 
Step:   47000, Reward: 15.875 [3.806], Avg: 11.491 (0.2068) <0-00:28:18> 
Step:   48000, Reward: 15.375 [5.476], Avg: 11.57 (0.1986) <0-00:29:02> 
Step:   49000, Reward: 15.875 [4.897], Avg: 11.656 (0.1947) <0-00:29:42> 
Step:   50000, Reward: 15.5 [3.708], Avg: 11.732 (0.1870) <0-00:30:23> 
Step:   51000, Reward: 15.562 [4.415], Avg: 11.805 (0.1796) <0-00:31:04> 
Step:   52000, Reward: 17.312 [4.042], Avg: 11.909 (0.1760) <0-00:31:47> 
Step:   53000, Reward: 13.875 [4.702], Avg: 11.946 (0.1725) <0-00:32:27> 
Step:   54000, Reward: 13.938 [6.647], Avg: 11.982 (0.1690) <0-00:33:11> 
Step:   55000, Reward: 15.938 [7.215], Avg: 12.052 (0.1623) <0-00:34:00> 
Step:   56000, Reward: 9.688 [4.194], Avg: 12.011 (0.1591) <0-00:34:42> 
Step:   57000, Reward: 13.625 [3.756], Avg: 12.039 (0.1559) <0-00:35:25> 
Step:   58000, Reward: 16.188 [3.940], Avg: 12.109 (0.1497) <0-00:36:09> 
Step:   59000, Reward: 17.062 [5.202], Avg: 12.192 (0.1438) <0-00:36:59> 
Step:   60000, Reward: 18.062 [4.589], Avg: 12.288 (0.1409) <0-00:37:49> 
Step:   61000, Reward: 18.625 [5.936], Avg: 12.39 (0.1353) <0-00:38:37> 
Step:   62000, Reward: 16.562 [3.856], Avg: 12.456 (0.1326) <0-00:39:22> 
Step:   63000, Reward: 15.562 [4.821], Avg: 12.505 (0.1274) <0-00:40:08> 
Step:   64000, Reward: 13.375 [3.551], Avg: 12.518 (0.1248) <0-00:40:50> 
Step:   65000, Reward: 16.375 [4.729], Avg: 12.577 (0.1223) <0-00:41:35> 
Step:   66000, Reward: 17.875 [4.400], Avg: 12.656 (0.1175) <0-00:42:21> 
Step:   67000, Reward: 11.625 [3.806], Avg: 12.641 (0.1151) <0-00:43:05> 
Step:   68000, Reward: 11.25 [4.493], Avg: 12.62 (0.1084) <0-00:43:45> 
Step:   69000, Reward: 13.25 [4.437], Avg: 12.629 (0.1062) <0-00:44:26> 
Step:   70000, Reward: 15.438 [3.856], Avg: 12.669 (0.1041) <0-00:45:09> 
Step:   71000, Reward: 16.25 [4.548], Avg: 12.719 (0.0979) <0-00:45:58> 
Step:   72000, Reward: 17.438 [7.176], Avg: 12.783 (0.0941) <0-00:46:47> 
Step:   73000, Reward: 16.812 [4.850], Avg: 12.838 (0.0903) <0-00:47:36> 
Step:   74000, Reward: 16.062 [4.160], Avg: 12.881 (0.0885) <0-00:48:21> 
Step:   75000, Reward: 15.188 [5.434], Avg: 12.911 (0.0868) <0-00:49:04> 
Step:   76000, Reward: 15.062 [3.913], Avg: 12.939 (0.0850) <0-00:49:47> 
Step:   77000, Reward: 17.562 [4.650], Avg: 12.998 (0.0817) <0-00:50:34> 
Step:   78000, Reward: 16.938 [4.802], Avg: 13.048 (0.0817) <0-00:51:14> 
Step:   79000, Reward: 16.125 [6.112], Avg: 13.087 (0.0800) <0-00:51:57> 
Step:   80000, Reward: 17.062 [4.776], Avg: 13.136 (0.0769) <0-00:52:38> 
Step:   81000, Reward: 17.062 [3.848], Avg: 13.184 (0.0738) <0-00:53:17> 
Step:   82000, Reward: 17.875 [5.721], Avg: 13.24 (0.0723) <0-00:53:59> 
Step:   83000, Reward: 17.375 [4.608], Avg: 13.289 (0.0709) <0-00:54:43> 
Step:   84000, Reward: 15.438 [3.691], Avg: 13.315 (0.0695) <0-00:55:23> 
Step:   85000, Reward: 16.0 [4.987], Avg: 13.346 (0.0667) <0-00:56:09> 
Step:   86000, Reward: 18.25 [4.521], Avg: 13.402 (0.0641) <0-00:56:54> 
Step:   87000, Reward: 17.625 [3.180], Avg: 13.45 (0.0628) <0-00:57:39> 
Step:   88000, Reward: 16.875 [3.238], Avg: 13.489 (0.0603) <0-00:58:26> 
Step:   89000, Reward: 21.25 [6.969], Avg: 13.575 (0.0591) <0-00:59:20> 
Step:   90000, Reward: 17.5 [4.664], Avg: 13.618 (0.0579) <0-01:00:06> 
Step:   91000, Reward: 18.438 [5.701], Avg: 13.671 (0.0568) <0-01:00:53> 
Step:   92000, Reward: 17.438 [4.703], Avg: 13.711 (0.0556) <0-01:01:37> 
Step:   93000, Reward: 17.812 [5.736], Avg: 13.755 (0.0545) <0-01:02:20> 
Step:   94000, Reward: 19.312 [4.934], Avg: 13.813 (0.0524) <0-01:03:04> 
Step:   95000, Reward: 17.438 [4.472], Avg: 13.851 (0.0524) <0-01:03:44> 
Step:   96000, Reward: 18.062 [3.561], Avg: 13.894 (0.0513) <0-01:04:25> 
Step:   97000, Reward: 19.188 [4.773], Avg: 13.948 (0.0493) <0-01:05:09> 
Step:   98000, Reward: 15.312 [3.292], Avg: 13.962 (0.0473) <0-01:05:50> 
Step:   99000, Reward: 15.438 [6.245], Avg: 13.977 (0.0455) <0-01:06:34> 
Step:  100000, Reward: 11.812 [3.522], Avg: 13.955 (0.0437) <0-01:07:18> 
Step:  101000, Reward: 14.938 [6.427], Avg: 13.965 (0.0428) <0-01:08:08> 
Step:  102000, Reward: 17.062 [3.508], Avg: 13.995 (0.0411) <0-01:08:52> 
Step:  103000, Reward: 16.688 [4.119], Avg: 14.021 (0.0403) <0-01:09:36> 
Step:  104000, Reward: 17.312 [3.176], Avg: 14.052 (0.0395) <0-01:10:19> 
Step:  105000, Reward: 16.938 [3.766], Avg: 14.08 (0.0387) <0-01:11:01> 
Step:  106000, Reward: 16.75 [4.116], Avg: 14.105 (0.0379) <0-01:11:46> 
Step:  107000, Reward: 19.188 [5.065], Avg: 14.152 (0.0371) <0-01:12:36> 
Step:  108000, Reward: 18.188 [5.581], Avg: 14.189 (0.0364) <0-01:13:23> 
Step:  109000, Reward: 17.562 [4.609], Avg: 14.219 (0.0357) <0-01:14:08> 
Step:  110000, Reward: 16.75 [5.640], Avg: 14.242 (0.0343) <0-01:14:52> 
Step:  111000, Reward: 18.562 [5.831], Avg: 14.281 (0.0336) <0-01:15:46> 
Step:  112000, Reward: 10.062 [3.325], Avg: 14.243 (0.0322) <0-01:16:28> 
Step:  113000, Reward: 19.75 [4.352], Avg: 14.292 (0.0316) <0-01:17:16> 
Step:  114000, Reward: 12.438 [4.107], Avg: 14.276 (0.0303) <0-01:18:03> 
Step:  115000, Reward: 18.5 [4.373], Avg: 14.312 (0.0291) <0-01:18:50> 
Step:  116000, Reward: 19.875 [6.163], Avg: 14.36 (0.0286) <0-01:19:38> 
Step:  117000, Reward: 18.0 [3.623], Avg: 14.39 (0.0280) <0-01:20:22> 
Step:  118000, Reward: 18.188 [4.050], Avg: 14.422 (0.0269) <0-01:21:08> 
Step:  119000, Reward: 18.75 [4.854], Avg: 14.458 (0.0258) <0-01:21:55> 
Step:  120000, Reward: 17.188 [4.586], Avg: 14.481 (0.0253) <0-01:22:41> 
Step:  121000, Reward: 15.188 [3.627], Avg: 14.487 (0.0248) <0-01:23:26> 
Step:  122000, Reward: 7.062 [2.585], Avg: 14.426 (0.0238) <0-01:24:06> 
Step:  123000, Reward: 19.5 [4.743], Avg: 14.467 (0.0233) <0-01:24:53> 
Step:  124000, Reward: 17.188 [3.468], Avg: 14.489 (0.0229) <0-01:25:37> 
Step:  125000, Reward: 19.562 [6.964], Avg: 14.529 (0.0220) <0-01:26:31> 
Step:  126000, Reward: 15.375 [3.638], Avg: 14.536 (0.0215) <0-01:27:16> 
Step:  127000, Reward: 18.0 [3.571], Avg: 14.563 (0.0211) <0-01:28:01> 
Step:  128000, Reward: 17.375 [4.512], Avg: 14.585 (0.0203) <0-01:28:47> 
Step:  129000, Reward: 12.5 [2.574], Avg: 14.569 (0.0200) <0-01:29:31> 
Step:  130000, Reward: 13.812 [4.965], Avg: 14.563 (0.0200) <0-01:30:23> 
Step:  131000, Reward: 15.0 [4.730], Avg: 14.566 (0.0200) <0-01:31:06> 
Step:  132000, Reward: 16.562 [4.415], Avg: 14.581 (0.0200) <0-01:31:55> 
Step:  133000, Reward: 11.438 [3.791], Avg: 14.558 (0.0200) <0-01:32:38> 
Step:  134000, Reward: 15.438 [4.227], Avg: 14.564 (0.0200) <0-01:33:23> 
Step:  135000, Reward: 16.5 [5.668], Avg: 14.579 (0.0200) <0-01:34:07> 
Step:  136000, Reward: 17.062 [5.238], Avg: 14.597 (0.0200) <0-01:34:52> 
Step:  137000, Reward: 18.562 [5.722], Avg: 14.625 (0.0200) <0-01:35:42> 
Step:  138000, Reward: 16.812 [4.019], Avg: 14.641 (0.0200) <0-01:36:27> 
Step:  139000, Reward: 17.438 [3.297], Avg: 14.661 (0.0200) <0-01:37:11> 
Step:  140000, Reward: 15.562 [4.272], Avg: 14.668 (0.0200) <0-01:37:55> 
Step:  141000, Reward: 16.562 [4.077], Avg: 14.681 (0.0200) <0-01:38:40> 
Step:  142000, Reward: 17.562 [4.623], Avg: 14.701 (0.0200) <0-01:39:29> 
Step:  143000, Reward: 18.25 [5.262], Avg: 14.726 (0.0200) <0-01:40:16> 
Step:  144000, Reward: 18.688 [3.901], Avg: 14.753 (0.0200) <0-01:41:01> 
Step:  145000, Reward: 18.125 [4.121], Avg: 14.776 (0.0200) <0-01:41:48> 
Step:  146000, Reward: 18.625 [4.343], Avg: 14.802 (0.0200) <0-01:42:33> 
Step:  147000, Reward: 18.75 [5.449], Avg: 14.829 (0.0200) <0-01:43:16> 
Step:  148000, Reward: 14.75 [3.913], Avg: 14.828 (0.0200) <0-01:43:57> 
Step:  149000, Reward: 16.375 [5.219], Avg: 14.839 (0.0200) <0-01:44:43> 
Step:  150000, Reward: 18.25 [5.573], Avg: 14.861 (0.0200) <0-01:45:33> 
Step:  151000, Reward: 17.562 [5.135], Avg: 14.879 (0.0200) <0-01:46:23> 
Step:  152000, Reward: 15.0 [4.809], Avg: 14.88 (0.0200) <0-01:47:09> 
Step:  153000, Reward: 17.688 [5.785], Avg: 14.898 (0.0200) <0-01:47:59> 
Step:  154000, Reward: 19.125 [5.314], Avg: 14.925 (0.0200) <0-01:48:46> 
Step:  155000, Reward: 17.562 [3.259], Avg: 14.942 (0.0200) <0-01:49:29> 
Step:  156000, Reward: 21.062 [5.539], Avg: 14.981 (0.0200) <0-01:50:19> 
Step:  157000, Reward: 20.125 [5.999], Avg: 15.014 (0.0200) <0-01:51:10> 
Step:  158000, Reward: 18.25 [4.161], Avg: 15.034 (0.0200) <0-01:51:54> 
Step:  159000, Reward: 19.875 [6.343], Avg: 15.064 (0.0200) <0-01:52:43> 
Step:  160000, Reward: 16.5 [2.958], Avg: 15.073 (0.0200) <0-01:53:26> 
Step:  161000, Reward: 18.625 [4.014], Avg: 15.095 (0.0200) <0-01:54:11> 
Step:  162000, Reward: 19.438 [4.555], Avg: 15.122 (0.0200) <0-01:54:59> 
Step:  163000, Reward: 17.375 [4.807], Avg: 15.136 (0.0200) <0-01:55:44> 
Step:  164000, Reward: 17.5 [5.208], Avg: 15.15 (0.0200) <0-01:56:29> 
Step:  165000, Reward: 17.75 [5.044], Avg: 15.166 (0.0200) <0-01:57:13> 
Step:  166000, Reward: 18.312 [4.149], Avg: 15.185 (0.0200) <0-01:58:00> 
Step:  167000, Reward: 15.438 [4.257], Avg: 15.186 (0.0200) <0-01:58:45> 
Step:  168000, Reward: 16.875 [3.295], Avg: 15.196 (0.0200) <0-01:59:28> 
Step:  169000, Reward: 19.0 [3.791], Avg: 15.218 (0.0200) <0-02:00:13> 
Step:  170000, Reward: 17.625 [3.935], Avg: 15.232 (0.0200) <0-02:00:57> 
Step:  171000, Reward: 17.688 [4.700], Avg: 15.247 (0.0200) <0-02:01:47> 
Step:  172000, Reward: 18.125 [4.166], Avg: 15.263 (0.0200) <0-02:02:31> 
Step:  173000, Reward: 15.75 [3.544], Avg: 15.266 (0.0200) <0-02:03:12> 
Step:  174000, Reward: 16.188 [2.674], Avg: 15.271 (0.0200) <0-02:03:55> 
Step:  175000, Reward: 18.875 [6.518], Avg: 15.292 (0.0200) <0-02:04:43> 
Step:  176000, Reward: 17.5 [4.243], Avg: 15.304 (0.0200) <0-02:05:28> 
Step:  177000, Reward: 17.312 [6.090], Avg: 15.316 (0.0200) <0-02:06:15> 
Step:  178000, Reward: 17.0 [5.292], Avg: 15.325 (0.0200) <0-02:06:59> 
Step:  179000, Reward: 15.188 [4.126], Avg: 15.324 (0.0200) <0-02:07:43> 
Step:  180000, Reward: 17.375 [5.533], Avg: 15.336 (0.0200) <0-02:08:30> 
Step:  181000, Reward: 18.312 [4.283], Avg: 15.352 (0.0200) <0-02:09:15> 
Step:  182000, Reward: 17.188 [3.844], Avg: 15.362 (0.0200) <0-02:09:55> 
Step:  183000, Reward: 19.375 [4.948], Avg: 15.384 (0.0200) <0-02:10:41> 
Step:  184000, Reward: 11.125 [4.060], Avg: 15.361 (0.0200) <0-02:11:25> 
Step:  185000, Reward: 16.75 [3.832], Avg: 15.368 (0.0200) <0-02:12:08> 
Step:  186000, Reward: 16.938 [5.857], Avg: 15.377 (0.0200) <0-02:12:56> 
Step:  187000, Reward: 20.812 [6.444], Avg: 15.406 (0.0200) <0-02:13:44> 
Step:  188000, Reward: 16.562 [3.824], Avg: 15.412 (0.0200) <0-02:14:27> 
Step:  189000, Reward: 16.625 [3.740], Avg: 15.418 (0.0200) <0-02:15:11> 
Step:  190000, Reward: 17.188 [5.581], Avg: 15.427 (0.0200) <0-02:15:57> 
Step:  191000, Reward: 18.0 [5.948], Avg: 15.441 (0.0200) <0-02:16:43> 
Step:  192000, Reward: 17.25 [5.006], Avg: 15.45 (0.0200) <0-02:17:28> 
Step:  193000, Reward: 17.0 [4.650], Avg: 15.458 (0.0200) <0-02:18:11> 
Step:  194000, Reward: 19.25 [3.750], Avg: 15.478 (0.0200) <0-02:18:58> 
Step:  195000, Reward: 18.0 [6.062], Avg: 15.49 (0.0200) <0-02:19:47> 
Step:  196000, Reward: 17.938 [2.772], Avg: 15.503 (0.0200) <0-02:20:31> 
Step:  197000, Reward: 17.125 [3.039], Avg: 15.511 (0.0200) <0-02:21:15> 
Step:  198000, Reward: 17.688 [5.335], Avg: 15.522 (0.0200) <0-02:22:01> 
Step:  199000, Reward: 8.688 [3.292], Avg: 15.488 (0.0200) <0-02:22:45> 
Step:  200000, Reward: 16.812 [3.909], Avg: 15.494 (0.0200) <0-02:23:29> 
Step:  201000, Reward: 16.688 [3.933], Avg: 15.5 (0.0200) <0-02:24:11> 
Step:  202000, Reward: 11.0 [4.596], Avg: 15.478 (0.0200) <0-02:24:53> 
Step:  203000, Reward: 10.312 [3.423], Avg: 15.453 (0.0200) <0-02:25:38> 
Step:  204000, Reward: 10.438 [4.227], Avg: 15.428 (0.0200) <0-02:26:22> 
Step:  205000, Reward: 17.375 [5.578], Avg: 15.438 (0.0200) <0-02:27:10> 
Step:  206000, Reward: 18.875 [3.903], Avg: 15.454 (0.0200) <0-02:27:56> 
Step:  207000, Reward: 21.0 [6.042], Avg: 15.481 (0.0200) <0-02:28:44> 
Step:  208000, Reward: 12.375 [4.442], Avg: 15.466 (0.0200) <0-02:29:29> 
Step:  209000, Reward: 13.375 [5.325], Avg: 15.456 (0.0200) <0-02:30:13> 
Step:  210000, Reward: 9.812 [3.811], Avg: 15.43 (0.0200) <0-02:30:53> 
Step:  211000, Reward: 17.375 [4.060], Avg: 15.439 (0.0200) <0-02:31:34> 
Step:  212000, Reward: 17.875 [5.622], Avg: 15.45 (0.0200) <0-02:32:17> 
Step:  213000, Reward: 21.875 [5.314], Avg: 15.48 (0.0200) <0-02:32:59> 
Step:  214000, Reward: 16.625 [3.160], Avg: 15.485 (0.0200) <0-02:33:39> 
Step:  215000, Reward: 14.562 [2.783], Avg: 15.481 (0.0200) <0-02:34:16> 
Step:  216000, Reward: 17.062 [5.190], Avg: 15.488 (0.0200) <0-02:34:59> 
Step:  217000, Reward: 15.875 [4.936], Avg: 15.49 (0.0200) <0-02:35:40> 
Step:  218000, Reward: 12.125 [4.456], Avg: 15.475 (0.0200) <0-02:36:20> 
Step:  219000, Reward: 17.062 [5.573], Avg: 15.482 (0.0200) <0-02:37:04> 
Step:  220000, Reward: 18.125 [4.386], Avg: 15.494 (0.0200) <0-02:37:45> 
Step:  221000, Reward: 16.438 [5.147], Avg: 15.498 (0.0200) <0-02:38:26> 
Step:  222000, Reward: 18.312 [3.901], Avg: 15.511 (0.0200) <0-02:39:09> 
Step:  223000, Reward: 14.312 [3.036], Avg: 15.506 (0.0200) <0-02:39:51> 
Step:  224000, Reward: 19.562 [5.711], Avg: 15.524 (0.0200) <0-02:40:35> 
Step:  225000, Reward: 17.375 [3.638], Avg: 15.532 (0.0200) <0-02:41:15> 
Step:  226000, Reward: 2.375 [2.058], Avg: 15.474 (0.0200) <0-02:41:50> 
Step:  227000, Reward: 3.062 [1.886], Avg: 15.419 (0.0200) <0-02:42:24> 
Step:  228000, Reward: 3.25 [2.905], Avg: 15.366 (0.0200) <0-02:43:02> 
Step:  229000, Reward: 3.875 [2.595], Avg: 15.316 (0.0200) <0-02:43:39> 
Step:  230000, Reward: 3.375 [2.522], Avg: 15.265 (0.0200) <0-02:44:13> 
Step:  231000, Reward: 1.812 [2.186], Avg: 15.207 (0.0200) <0-02:44:46> 
Step:  232000, Reward: 2.438 [2.030], Avg: 15.152 (0.0200) <0-02:45:19> 
Step:  233000, Reward: 3.438 [2.150], Avg: 15.102 (0.0200) <0-02:45:54> 
Step:  234000, Reward: 2.375 [2.233], Avg: 15.048 (0.0200) <0-02:46:29> 
Step:  235000, Reward: 2.375 [2.088], Avg: 14.994 (0.0200) <0-02:47:02> 
Step:  236000, Reward: 2.5 [1.969], Avg: 14.941 (0.0200) <0-02:47:36> 
Step:  237000, Reward: 2.125 [1.763], Avg: 14.887 (0.0200) <0-02:48:09> 
Step:  238000, Reward: 2.875 [2.233], Avg: 14.837 (0.0200) <0-02:48:43> 
Step:  239000, Reward: 2.438 [2.179], Avg: 14.785 (0.0200) <0-02:49:20> 
Step:  240000, Reward: 3.188 [1.911], Avg: 14.737 (0.0200) <0-02:49:53> 
Step:  241000, Reward: 3.125 [1.867], Avg: 14.689 (0.0200) <0-02:50:27> 
Step:  242000, Reward: 2.688 [2.284], Avg: 14.64 (0.0200) <0-02:51:01> 
Step:  243000, Reward: 3.375 [2.088], Avg: 14.594 (0.0200) <0-02:51:36> 
Step:  244000, Reward: 1.688 [1.570], Avg: 14.541 (0.0200) <0-02:52:09> 
Step:  245000, Reward: 2.062 [1.676], Avg: 14.49 (0.0200) <0-02:52:42> 
Step:  246000, Reward: 2.188 [1.704], Avg: 14.441 (0.0200) <0-02:53:15> 
Step:  247000, Reward: 2.5 [1.620], Avg: 14.392 (0.0200) <0-02:53:47> 
Step:  248000, Reward: 2.75 [2.462], Avg: 14.346 (0.0200) <0-02:54:23> 
Step:  249000, Reward: 2.062 [1.819], Avg: 14.297 (0.0200) <0-02:54:57> 
Step:  250000, Reward: 2.25 [2.194], Avg: 14.249 (0.0200) <0-02:55:31> 
