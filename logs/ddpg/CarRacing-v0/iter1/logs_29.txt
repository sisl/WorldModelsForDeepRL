Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/iter1, Date: 25/03/2020 09:25:34
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 020c1911fe31fad9595dc141b3a4f6f28e3b4418
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f630402fb38>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -44.136 [14.297], Avg: -44.136 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -38.358 [21.768], Avg: -41.247 (0.9800) <0-00:03:00> 
Step:    2000, Reward: -33.057 [21.264], Avg: -38.517 (0.9604) <0-00:05:31> 
Step:    3000, Reward: -33.937 [24.138], Avg: -37.372 (0.9412) <0-00:08:16> 
Step:    4000, Reward: -46.731 [17.532], Avg: -39.244 (0.9224) <0-00:11:22> 
Step:    5000, Reward: -38.76 [24.062], Avg: -39.163 (0.9039) <0-00:14:11> 
Step:    6000, Reward: -35.444 [23.396], Avg: -38.632 (0.8858) <0-00:17:22> 
Step:    7000, Reward: -40.675 [24.726], Avg: -38.887 (0.8681) <0-00:20:23> 
Step:    8000, Reward: -28.571 [30.937], Avg: -37.741 (0.8508) <0-00:23:23> 
Step:    9000, Reward: -32.135 [25.392], Avg: -37.18 (0.8337) <0-00:26:20> 
Step:   10000, Reward: -39.111 [15.327], Avg: -37.356 (0.8171) <0-00:29:23> 
Step:   11000, Reward: -28.843 [26.508], Avg: -36.646 (0.8007) <0-00:31:52> 
Step:   12000, Reward: -41.425 [23.393], Avg: -37.014 (0.7847) <0-00:33:32> 
Step:   13000, Reward: -34.22 [21.668], Avg: -36.814 (0.7690) <0-00:35:07> 
Step:   14000, Reward: -29.284 [37.539], Avg: -36.312 (0.7536) <0-00:36:42> 
Step:   15000, Reward: -28.042 [25.932], Avg: -35.796 (0.7386) <0-00:38:17> 
Step:   16000, Reward: -24.309 [35.434], Avg: -35.12 (0.7238) <0-00:39:53> 
Step:   17000, Reward: -18.12 [43.342], Avg: -34.175 (0.7093) <0-00:41:28> 
Step:   18000, Reward: -38.138 [39.386], Avg: -34.384 (0.6951) <0-00:43:01> 
Step:   19000, Reward: -23.946 [34.251], Avg: -33.862 (0.6812) <0-00:44:37> 
Step:   20000, Reward: -15.912 [31.676], Avg: -33.007 (0.6676) <0-00:46:13> 
Step:   21000, Reward: -21.008 [30.705], Avg: -32.462 (0.6543) <0-00:47:48> 
Step:   22000, Reward: 8.144 [52.116], Avg: -30.696 (0.6412) <0-00:49:22> 
Step:   23000, Reward: 6.259 [43.739], Avg: -29.157 (0.6283) <0-00:50:57> 
Step:   24000, Reward: -0.613 [43.462], Avg: -28.015 (0.6158) <0-00:52:33> 
Step:   25000, Reward: 12.932 [44.675], Avg: -26.44 (0.6035) <0-00:54:09> 
Step:   26000, Reward: 8.435 [53.441], Avg: -25.148 (0.5914) <0-00:55:45> 
Step:   27000, Reward: 11.781 [48.702], Avg: -23.829 (0.5796) <0-00:57:21> 
Step:   28000, Reward: -12.507 [58.094], Avg: -23.439 (0.5680) <0-00:58:57> 
Step:   29000, Reward: 30.465 [55.531], Avg: -21.642 (0.5566) <0-01:00:32> 
Step:   30000, Reward: 10.235 [61.193], Avg: -20.614 (0.5455) <0-01:02:07> 
Step:   31000, Reward: 31.945 [66.276], Avg: -18.971 (0.5346) <0-01:03:43> 
Step:   32000, Reward: 67.764 [52.851], Avg: -16.343 (0.5239) <0-01:05:17> 
Step:   33000, Reward: 61.032 [77.898], Avg: -14.067 (0.5134) <0-01:06:53> 
Step:   34000, Reward: 104.711 [71.579], Avg: -10.674 (0.5031) <0-01:08:29> 
Step:   35000, Reward: 123.296 [83.862], Avg: -6.952 (0.4931) <0-01:10:05> 
Step:   36000, Reward: 128.301 [79.506], Avg: -3.297 (0.4832) <0-01:11:40> 
Step:   37000, Reward: 84.503 [105.756], Avg: -0.986 (0.4735) <0-01:13:14> 
Step:   38000, Reward: 84.908 [79.923], Avg: 1.216 (0.4641) <0-01:14:51> 
Step:   39000, Reward: 130.941 [101.572], Avg: 4.459 (0.4548) <0-01:16:26> 
Step:   40000, Reward: 133.952 [119.371], Avg: 7.618 (0.4457) <0-01:18:00> 
Step:   41000, Reward: 147.988 [122.341], Avg: 10.96 (0.4368) <0-01:19:35> 
Step:   42000, Reward: 82.806 [100.695], Avg: 12.631 (0.4281) <0-01:21:09> 
Step:   43000, Reward: 68.453 [111.180], Avg: 13.899 (0.4195) <0-01:22:45> 
Step:   44000, Reward: 118.823 [112.516], Avg: 16.231 (0.4111) <0-01:24:21> 
Step:   45000, Reward: 197.954 [102.583], Avg: 20.181 (0.4029) <0-01:25:57> 
Step:   46000, Reward: 199.828 [137.710], Avg: 24.004 (0.3948) <0-01:27:32> 
Step:   47000, Reward: 248.184 [153.990], Avg: 28.674 (0.3869) <0-01:29:07> 
Step:   48000, Reward: 203.203 [114.523], Avg: 32.236 (0.3792) <0-01:30:43> 
Step:   49000, Reward: 230.228 [121.040], Avg: 36.196 (0.3716) <0-01:32:18> 
Step:   50000, Reward: 185.761 [163.846], Avg: 39.128 (0.3642) <0-01:33:52> 
Step:   51000, Reward: 219.972 [145.520], Avg: 42.606 (0.3569) <0-01:35:28> 
Step:   52000, Reward: 152.717 [151.411], Avg: 44.684 (0.3497) <0-01:37:03> 
Step:   53000, Reward: 178.042 [147.630], Avg: 47.153 (0.3428) <0-01:38:40> 
Step:   54000, Reward: 222.476 [201.741], Avg: 50.341 (0.3359) <0-01:40:15> 
Step:   55000, Reward: 263.279 [144.072], Avg: 54.144 (0.3292) <0-01:41:51> 
Step:   56000, Reward: 209.918 [186.805], Avg: 56.876 (0.3226) <0-01:43:28> 
Step:   57000, Reward: 239.107 [215.708], Avg: 60.018 (0.3161) <0-01:45:05> 
Step:   58000, Reward: 353.939 [129.091], Avg: 65.0 (0.3098) <0-01:46:41> 
Step:   59000, Reward: 293.004 [188.457], Avg: 68.8 (0.3036) <0-01:48:17> 
Step:   60000, Reward: 315.33 [197.952], Avg: 72.842 (0.2976) <0-01:49:52> 
Step:   61000, Reward: 393.033 [106.463], Avg: 78.006 (0.2916) <0-01:51:28> 
Step:   62000, Reward: 503.096 [112.187], Avg: 84.753 (0.2858) <0-01:53:03> 
Step:   63000, Reward: 511.861 [164.681], Avg: 91.427 (0.2801) <0-01:54:40> 
Step:   64000, Reward: 508.808 [204.895], Avg: 97.848 (0.2745) <0-01:56:15> 
Step:   65000, Reward: 482.146 [200.734], Avg: 103.671 (0.2690) <0-01:57:50> 
Step:   66000, Reward: 555.635 [155.457], Avg: 110.417 (0.2636) <0-01:59:25> 
Step:   67000, Reward: 537.747 [152.774], Avg: 116.701 (0.2583) <0-02:01:00> 
Step:   68000, Reward: 547.461 [180.807], Avg: 122.944 (0.2531) <0-02:02:36> 
Step:   69000, Reward: 650.941 [103.844], Avg: 130.487 (0.2481) <0-02:04:12> 
Step:   70000, Reward: 553.275 [73.359], Avg: 136.441 (0.2431) <0-02:05:47> 
Step:   71000, Reward: 587.592 [103.676], Avg: 142.707 (0.2383) <0-02:07:23> 
Step:   72000, Reward: 671.283 [129.131], Avg: 149.948 (0.2335) <0-02:08:59> 
Step:   73000, Reward: 647.725 [89.407], Avg: 156.675 (0.2288) <0-02:10:34> 
Step:   74000, Reward: 614.834 [111.266], Avg: 162.784 (0.2242) <0-02:12:09> 
Step:   75000, Reward: 592.698 [110.128], Avg: 168.44 (0.2198) <0-02:13:45> 
Step:   76000, Reward: 696.107 [121.720], Avg: 175.293 (0.2154) <0-02:15:21> 
Step:   77000, Reward: 695.612 [129.300], Avg: 181.964 (0.2111) <0-02:16:57> 
Step:   78000, Reward: 761.436 [170.322], Avg: 189.299 (0.2068) <0-02:18:33> 
Step:   79000, Reward: 591.73 [249.695], Avg: 194.329 (0.2027) <0-02:20:08> 
Step:   80000, Reward: 494.3 [182.588], Avg: 198.033 (0.1986) <0-02:21:45> 
Step:   81000, Reward: 728.268 [176.870], Avg: 204.499 (0.1947) <0-02:23:23> 
Step:   82000, Reward: 613.244 [202.339], Avg: 209.424 (0.1908) <0-02:24:58> 
Step:   83000, Reward: 622.457 [239.522], Avg: 214.341 (0.1870) <0-02:26:35> 
Step:   84000, Reward: 638.733 [206.180], Avg: 219.334 (0.1832) <0-02:28:11> 
Step:   85000, Reward: 699.427 [193.053], Avg: 224.916 (0.1796) <0-02:29:47> 
Step:   86000, Reward: 693.217 [230.560], Avg: 230.299 (0.1760) <0-02:31:22> 
Step:   87000, Reward: 664.835 [210.217], Avg: 235.237 (0.1725) <0-02:32:58> 
Step:   88000, Reward: 768.012 [144.456], Avg: 241.223 (0.1690) <0-02:34:34> 
Step:   89000, Reward: 576.197 [255.584], Avg: 244.945 (0.1656) <0-02:36:11> 
Step:   90000, Reward: 832.353 [125.991], Avg: 251.4 (0.1623) <0-02:37:46> 
Step:   91000, Reward: 801.438 [154.577], Avg: 257.379 (0.1591) <0-02:39:22> 
Step:   92000, Reward: 836.142 [57.206], Avg: 263.602 (0.1559) <0-02:40:57> 
Step:   93000, Reward: 774.269 [174.320], Avg: 269.035 (0.1528) <0-02:42:34> 
Step:   94000, Reward: 774.092 [196.709], Avg: 274.351 (0.1497) <0-02:44:11> 
Step:   95000, Reward: 835.441 [82.615], Avg: 280.196 (0.1467) <0-02:45:47> 
Step:   96000, Reward: 816.392 [141.676], Avg: 285.723 (0.1438) <0-02:47:21> 
Step:   97000, Reward: 767.231 [168.958], Avg: 290.637 (0.1409) <0-02:48:57> 
Step:   98000, Reward: 555.173 [323.011], Avg: 293.309 (0.1381) <0-02:50:32> 
Step:   99000, Reward: 765.23 [182.321], Avg: 298.028 (0.1353) <0-02:52:10> 
Step:  100000, Reward: 702.716 [243.383], Avg: 302.035 (0.1326) <0-02:53:47> 
Step:  101000, Reward: 689.777 [249.297], Avg: 305.836 (0.1300) <0-02:55:23> 
Step:  102000, Reward: 826.053 [137.074], Avg: 310.887 (0.1274) <0-02:56:58> 
Step:  103000, Reward: 783.934 [168.966], Avg: 315.435 (0.1248) <0-02:58:33> 
Step:  104000, Reward: 772.366 [202.042], Avg: 319.787 (0.1223) <0-03:00:12> 
Step:  105000, Reward: 825.694 [167.445], Avg: 324.56 (0.1199) <0-03:01:49> 
Step:  106000, Reward: 802.952 [141.577], Avg: 329.031 (0.1175) <0-03:03:26> 
Step:  107000, Reward: 886.018 [23.421], Avg: 334.188 (0.1151) <0-03:05:02> 
Step:  108000, Reward: 655.942 [293.853], Avg: 337.14 (0.1128) <0-03:06:38> 
Step:  109000, Reward: 808.923 [93.019], Avg: 341.429 (0.1106) <0-03:08:14> 
Step:  110000, Reward: 734.425 [189.146], Avg: 344.969 (0.1084) <0-03:09:50> 
Step:  111000, Reward: 595.027 [254.672], Avg: 347.202 (0.1062) <0-03:11:27> 
Step:  112000, Reward: 719.856 [199.403], Avg: 350.5 (0.1041) <0-03:13:03> 
Step:  113000, Reward: 754.09 [181.327], Avg: 354.04 (0.1020) <0-03:14:40> 
Step:  114000, Reward: 739.192 [169.020], Avg: 357.389 (0.0999) <0-03:16:16> 
Step:  115000, Reward: 799.899 [169.562], Avg: 361.204 (0.0979) <0-03:17:53> 
Step:  116000, Reward: 738.423 [220.492], Avg: 364.428 (0.0960) <0-03:19:29> 
Step:  117000, Reward: 828.011 [151.589], Avg: 368.357 (0.0941) <0-03:21:05> 
Step:  118000, Reward: 788.56 [173.815], Avg: 371.888 (0.0922) <0-03:22:42> 
Step:  119000, Reward: 731.984 [197.785], Avg: 374.889 (0.0903) <0-03:24:19> 
Step:  120000, Reward: 767.877 [190.054], Avg: 378.137 (0.0885) <0-03:25:55> 
Step:  121000, Reward: 713.082 [209.008], Avg: 380.882 (0.0868) <0-03:27:33> 
Step:  122000, Reward: 644.956 [236.309], Avg: 383.029 (0.0833) <0-03:29:07> 
Step:  123000, Reward: 818.785 [141.949], Avg: 386.543 (0.0817) <0-03:30:45> 
Step:  124000, Reward: 572.057 [262.921], Avg: 388.027 (0.0800) <0-03:32:22> 
Step:  125000, Reward: 871.269 [31.881], Avg: 391.862 (0.0784) <0-03:33:58> 
Step:  126000, Reward: 842.298 [150.889], Avg: 395.409 (0.0769) <0-03:35:33> 
Step:  127000, Reward: 785.244 [164.047], Avg: 398.455 (0.0753) <0-03:37:08> 
Step:  128000, Reward: 707.793 [213.135], Avg: 400.853 (0.0738) <0-03:38:46> 
Step:  129000, Reward: 789.307 [175.560], Avg: 403.841 (0.0723) <0-03:40:22> 
Step:  130000, Reward: 777.608 [150.713], Avg: 406.694 (0.0709) <0-03:41:59> 
Step:  131000, Reward: 749.637 [167.642], Avg: 409.292 (0.0695) <0-03:43:37> 
Step:  132000, Reward: 873.512 [24.522], Avg: 412.782 (0.0681) <0-03:45:14> 
Step:  133000, Reward: 714.817 [250.273], Avg: 415.036 (0.0667) <0-03:46:50> 
Step:  134000, Reward: 776.11 [215.488], Avg: 417.711 (0.0654) <0-03:48:26> 
Step:  135000, Reward: 899.099 [18.705], Avg: 421.251 (0.0641) <0-03:50:03> 
Step:  136000, Reward: 893.12 [24.325], Avg: 424.695 (0.0615) <0-03:51:40> 
Step:  137000, Reward: 898.199 [21.891], Avg: 428.126 (0.0603) <0-03:53:16> 
