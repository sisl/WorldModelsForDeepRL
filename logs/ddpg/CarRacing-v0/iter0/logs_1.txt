Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/iter0, Date: 24/03/2020 23:42:24
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 7fb7aaedab1ab91630cf7263cf940235ef38b802
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7fac25539b38>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -55.265 [12.331], Avg: -55.265 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -45.298 [16.871], Avg: -50.282 (0.9800) <0-00:05:08> 
Step:    2000, Reward: -41.971 [18.416], Avg: -47.511 (0.9604) <0-00:11:04> 
Step:    3000, Reward: -43.897 [15.795], Avg: -46.608 (0.9412) <0-00:15:49> 
Step:    4000, Reward: -48.34 [19.202], Avg: -46.954 (0.9224) <0-00:20:43> 
Step:    5000, Reward: -39.608 [22.993], Avg: -45.73 (0.9039) <0-00:25:27> 
Step:    6000, Reward: -46.898 [16.259], Avg: -45.897 (0.8858) <0-00:30:07> 
Step:    7000, Reward: -42.777 [21.153], Avg: -45.507 (0.8681) <0-00:34:58> 
Step:    8000, Reward: -33.048 [29.104], Avg: -44.122 (0.8508) <0-00:40:41> 
Step:    9000, Reward: -33.64 [16.626], Avg: -43.074 (0.8337) <0-00:46:07> 
Step:   10000, Reward: -38.715 [23.152], Avg: -42.678 (0.8171) <0-00:50:58> 
Step:   11000, Reward: -33.532 [28.031], Avg: -41.916 (0.8007) <0-00:56:33> 
Step:   12000, Reward: -44.647 [41.526], Avg: -42.126 (0.7847) <0-01:01:51> 
Step:   13000, Reward: -23.573 [34.199], Avg: -40.801 (0.7690) <0-01:07:19> 
Step:   14000, Reward: -29.198 [38.881], Avg: -40.027 (0.7536) <0-01:12:41> 
Step:   15000, Reward: -27.095 [33.521], Avg: -39.219 (0.7386) <0-01:18:20> 
Step:   16000, Reward: -35.727 [14.753], Avg: -39.013 (0.7238) <0-01:23:05> 
Step:   17000, Reward: -46.61 [37.597], Avg: -39.436 (0.7093) <0-01:28:29> 
Step:   18000, Reward: -6.975 [42.528], Avg: -37.727 (0.6951) <0-01:33:57> 
Step:   19000, Reward: -17.668 [25.775], Avg: -36.724 (0.6812) <0-01:39:25> 
Step:   20000, Reward: -56.209 [53.806], Avg: -37.652 (0.6676) <0-01:44:41> 
Step:   21000, Reward: -24.812 [36.765], Avg: -37.068 (0.6543) <0-01:50:29> 
Step:   22000, Reward: -23.317 [46.663], Avg: -36.47 (0.6412) <0-01:56:11> 
Step:   23000, Reward: 0.784 [52.864], Avg: -34.918 (0.6283) <0-02:01:55> 
Step:   24000, Reward: 1.379 [78.620], Avg: -33.466 (0.6158) <0-02:07:35> 
Step:   25000, Reward: 2.867 [63.840], Avg: -32.069 (0.6035) <0-02:12:33> 
Step:   26000, Reward: 20.413 [64.934], Avg: -30.125 (0.5914) <0-02:18:11> 
Step:   27000, Reward: 24.011 [53.476], Avg: -28.192 (0.5796) <0-02:23:38> 
Step:   28000, Reward: 14.603 [64.591], Avg: -26.716 (0.5680) <0-02:29:04> 
Step:   29000, Reward: 56.737 [100.865], Avg: -23.934 (0.5566) <0-02:34:29> 
Step:   30000, Reward: 47.142 [94.308], Avg: -21.641 (0.5455) <0-02:40:00> 
Step:   31000, Reward: 79.332 [101.145], Avg: -18.486 (0.5346) <0-02:45:33> 
Step:   32000, Reward: 86.46 [102.568], Avg: -15.306 (0.5239) <0-02:51:36> 
Step:   33000, Reward: 12.042 [60.237], Avg: -14.501 (0.5134) <0-02:57:48> 
Step:   34000, Reward: 28.885 [75.868], Avg: -13.262 (0.5031) <0-03:03:49> 
Step:   35000, Reward: 46.124 [91.533], Avg: -11.612 (0.4931) <0-03:09:50> 
Step:   36000, Reward: 94.93 [90.500], Avg: -8.733 (0.4832) <0-03:15:35> 
Step:   37000, Reward: 38.894 [73.204], Avg: -7.479 (0.4735) <0-03:21:42> 
Step:   38000, Reward: 98.028 [146.863], Avg: -4.774 (0.4641) <0-03:27:47> 
Step:   39000, Reward: 120.915 [101.989], Avg: -1.632 (0.4548) <0-03:33:00> 
Step:   40000, Reward: 91.734 [100.549], Avg: 0.645 (0.4457) <0-03:38:51> 
Step:   41000, Reward: 86.023 [99.911], Avg: 2.678 (0.4368) <0-03:44:24> 
Step:   42000, Reward: 112.511 [120.669], Avg: 5.232 (0.4281) <0-03:50:24> 
Step:   43000, Reward: 77.625 [113.129], Avg: 6.878 (0.4195) <0-03:56:18> 
Step:   44000, Reward: 115.618 [152.097], Avg: 9.294 (0.4111) <0-04:01:08> 
Step:   45000, Reward: 54.842 [85.335], Avg: 10.284 (0.4029) <0-04:05:56> 
Step:   46000, Reward: 126.437 [154.984], Avg: 12.756 (0.3948) <0-04:08:47> 
Step:   47000, Reward: 118.441 [175.700], Avg: 14.957 (0.3869) <0-04:11:56> 
Step:   48000, Reward: 188.329 [175.919], Avg: 18.496 (0.3792) <0-04:15:00> 
Step:   49000, Reward: 123.797 [133.139], Avg: 20.602 (0.3716) <0-04:18:04> 
Step:   50000, Reward: 247.739 [152.567], Avg: 25.055 (0.3642) <0-04:21:05> 
Step:   51000, Reward: 124.788 [163.292], Avg: 26.973 (0.3569) <0-04:24:02> 
Step:   52000, Reward: 206.097 [200.591], Avg: 30.353 (0.3497) <0-04:27:09> 
Step:   53000, Reward: 119.18 [129.052], Avg: 31.998 (0.3428) <0-04:30:14> 
Step:   54000, Reward: 177.52 [126.536], Avg: 34.644 (0.3359) <0-04:33:08> 
Step:   55000, Reward: 107.016 [179.694], Avg: 35.936 (0.3292) <0-04:35:32> 
Step:   56000, Reward: 41.473 [106.233], Avg: 36.033 (0.3226) <0-04:38:21> 
Step:   57000, Reward: 135.301 [151.168], Avg: 37.745 (0.3161) <0-04:41:19> 
Step:   58000, Reward: 118.967 [140.617], Avg: 39.121 (0.3098) <0-04:44:30> 
Step:   59000, Reward: 219.363 [159.597], Avg: 42.125 (0.3036) <0-04:47:34> 
Step:   60000, Reward: 291.459 [115.760], Avg: 46.213 (0.2976) <0-04:50:32> 
Step:   61000, Reward: 339.696 [119.051], Avg: 50.946 (0.2916) <0-04:53:33> 
Step:   62000, Reward: 375.732 [168.709], Avg: 56.102 (0.2858) <0-04:56:28> 
Step:   63000, Reward: 502.068 [112.603], Avg: 63.07 (0.2801) <0-04:59:24> 
Step:   64000, Reward: 509.105 [233.353], Avg: 69.932 (0.2745) <0-05:02:27> 
Step:   65000, Reward: 501.871 [219.716], Avg: 76.477 (0.2690) <0-05:05:35> 
Step:   66000, Reward: 404.899 [287.246], Avg: 81.378 (0.2636) <0-05:08:33> 
Step:   67000, Reward: 413.674 [310.829], Avg: 86.265 (0.2583) <0-05:11:28> 
Step:   68000, Reward: 586.677 [260.359], Avg: 93.518 (0.2531) <0-05:14:40> 
Step:   69000, Reward: 477.186 [242.064], Avg: 98.998 (0.2481) <0-05:17:27> 
Step:   70000, Reward: 519.7 [238.593], Avg: 104.924 (0.2431) <0-05:20:07> 
Step:   71000, Reward: 597.237 [256.371], Avg: 111.762 (0.2383) <0-05:22:38> 
Step:   72000, Reward: 669.342 [242.710], Avg: 119.4 (0.2335) <0-05:25:42> 
Step:   73000, Reward: 603.596 [136.375], Avg: 125.943 (0.2288) <0-05:28:50> 
Step:   74000, Reward: 669.69 [138.246], Avg: 133.193 (0.2242) <0-05:32:01> 
Step:   75000, Reward: 647.326 [157.264], Avg: 139.958 (0.2198) <0-05:34:58> 
Step:   76000, Reward: 681.39 [80.057], Avg: 146.989 (0.2154) <0-05:38:06> 
Step:   77000, Reward: 723.439 [58.021], Avg: 154.38 (0.2111) <0-05:40:54> 
Step:   78000, Reward: 723.519 [129.549], Avg: 161.584 (0.2068) <0-05:43:45> 
Step:   79000, Reward: 710.4 [54.758], Avg: 168.444 (0.2027) <0-05:46:51> 
Step:   80000, Reward: 584.744 [77.487], Avg: 173.584 (0.1986) <0-05:49:56> 
Step:   81000, Reward: 711.868 [115.731], Avg: 180.148 (0.1947) <0-05:52:59> 
Step:   82000, Reward: 718.004 [140.607], Avg: 186.628 (0.1908) <0-05:55:52> 
Step:   83000, Reward: 730.787 [133.683], Avg: 193.106 (0.1870) <0-05:58:33> 
Step:   84000, Reward: 756.349 [140.120], Avg: 199.733 (0.1832) <0-06:01:35> 
Step:   85000, Reward: 720.149 [172.882], Avg: 205.784 (0.1796) <0-06:04:12> 
Step:   86000, Reward: 706.404 [203.186], Avg: 211.538 (0.1760) <0-06:07:00> 
Step:   87000, Reward: 719.76 [175.834], Avg: 217.314 (0.1725) <0-06:10:01> 
Step:   88000, Reward: 604.913 [200.899], Avg: 221.669 (0.1690) <0-06:13:21> 
Step:   89000, Reward: 693.47 [157.734], Avg: 226.911 (0.1656) <0-06:16:30> 
Step:   90000, Reward: 725.861 [196.800], Avg: 232.394 (0.1623) <0-06:19:43> 
Step:   91000, Reward: 676.487 [208.760], Avg: 237.221 (0.1591) <0-06:22:42> 
Step:   92000, Reward: 812.248 [57.253], Avg: 243.404 (0.1559) <0-06:25:54> 
Step:   93000, Reward: 816.561 [118.011], Avg: 249.501 (0.1528) <0-06:28:57> 
Step:   94000, Reward: 850.175 [79.908], Avg: 255.824 (0.1497) <0-06:32:01> 
Step:   95000, Reward: 705.905 [207.129], Avg: 260.513 (0.1467) <0-06:34:27> 
Step:   96000, Reward: 770.284 [223.552], Avg: 265.768 (0.1438) <0-06:37:25> 
Step:   97000, Reward: 842.848 [67.163], Avg: 271.657 (0.1409) <0-06:40:20> 
Step:   98000, Reward: 862.987 [47.552], Avg: 277.63 (0.1381) <0-06:43:30> 
Step:   99000, Reward: 872.029 [22.434], Avg: 283.574 (0.1353) <0-06:46:29> 
Step:  100000, Reward: 849.844 [54.294], Avg: 289.18 (0.1326) <0-06:49:32> 
Step:  101000, Reward: 814.29 [63.664], Avg: 294.328 (0.1300) <0-06:52:37> 
Step:  102000, Reward: 871.6 [63.853], Avg: 299.933 (0.1274) <0-06:55:44> 
Step:  103000, Reward: 849.605 [62.287], Avg: 305.218 (0.1248) <0-06:59:09> 
Step:  104000, Reward: 822.137 [67.955], Avg: 310.141 (0.1223) <0-07:02:12> 
Step:  105000, Reward: 796.489 [89.067], Avg: 314.73 (0.1199) <0-07:05:13> 
Step:  106000, Reward: 882.498 [22.177], Avg: 320.036 (0.1175) <0-07:07:46> 
Step:  107000, Reward: 842.774 [79.880], Avg: 324.876 (0.1151) <0-07:10:51> 
Step:  108000, Reward: 734.984 [179.511], Avg: 328.638 (0.1128) <0-07:14:01> 
Step:  109000, Reward: 729.53 [196.040], Avg: 332.283 (0.1106) <0-07:17:14> 
Step:  110000, Reward: 760.158 [162.413], Avg: 336.138 (0.1084) <0-07:20:10> 
Step:  111000, Reward: 665.093 [297.798], Avg: 339.075 (0.1062) <0-07:23:06> 
Step:  112000, Reward: 671.643 [198.078], Avg: 342.018 (0.1041) <0-07:26:17> 
Step:  113000, Reward: 749.073 [205.241], Avg: 345.588 (0.1020) <0-07:29:27> 
Step:  114000, Reward: 718.832 [266.250], Avg: 348.834 (0.0999) <0-07:32:25> 
Step:  115000, Reward: 833.722 [118.194], Avg: 353.014 (0.0979) <0-07:35:23> 
Step:  116000, Reward: 863.581 [109.146], Avg: 357.378 (0.0960) <0-07:38:39> 
Step:  117000, Reward: 736.086 [267.511], Avg: 360.587 (0.0941) <0-07:41:41> 
Step:  118000, Reward: 892.03 [19.169], Avg: 365.053 (0.0922) <0-07:44:54> 
Step:  119000, Reward: 828.026 [148.498], Avg: 368.911 (0.0903) <0-07:47:56> 
Step:  120000, Reward: 812.424 [230.473], Avg: 372.577 (0.0885) <0-07:50:29> 
Step:  121000, Reward: 829.665 [129.848], Avg: 376.323 (0.0868) <0-07:53:33> 
Step:  122000, Reward: 853.802 [138.221], Avg: 380.205 (0.0833) <0-07:56:25> 
Step:  123000, Reward: 849.482 [36.872], Avg: 383.99 (0.0817) <0-07:59:41> 
Step:  124000, Reward: 837.26 [117.232], Avg: 387.616 (0.0800) <0-08:02:45> 
Step:  125000, Reward: 806.455 [142.509], Avg: 390.94 (0.0784) <0-08:05:46> 
Step:  126000, Reward: 823.68 [120.102], Avg: 394.347 (0.0769) <0-08:08:43> 
Step:  127000, Reward: 865.713 [46.551], Avg: 398.03 (0.0753) <0-08:11:41> 
Step:  128000, Reward: 714.985 [209.614], Avg: 400.487 (0.0738) <0-08:15:07> 
Step:  129000, Reward: 805.129 [165.800], Avg: 403.6 (0.0723) <0-08:18:07> 
Step:  130000, Reward: 769.433 [137.701], Avg: 406.392 (0.0709) <0-08:21:18> 
Step:  131000, Reward: 794.385 [173.240], Avg: 409.332 (0.0695) <0-08:24:30> 
Step:  132000, Reward: 781.095 [191.831], Avg: 412.127 (0.0681) <0-08:27:31> 
Step:  133000, Reward: 672.424 [256.782], Avg: 414.069 (0.0667) <0-08:30:36> 
Step:  134000, Reward: 603.686 [270.556], Avg: 415.474 (0.0654) <0-08:33:11> 
Step:  135000, Reward: 736.91 [184.806], Avg: 417.837 (0.0641) <0-08:36:06> 
Step:  136000, Reward: 628.168 [239.616], Avg: 419.373 (0.0628) <0-08:39:01> 
Step:  137000, Reward: 683.965 [220.331], Avg: 421.29 (0.0615) <0-08:41:52> 
Step:  138000, Reward: 801.758 [119.283], Avg: 424.027 (0.0603) <0-08:44:51> 
Step:  139000, Reward: 728.914 [236.927], Avg: 426.205 (0.0591) <0-08:47:56> 
Step:  140000, Reward: 677.511 [197.042], Avg: 427.987 (0.0579) <0-08:50:26> 
Step:  141000, Reward: 760.533 [178.611], Avg: 430.329 (0.0568) <0-08:53:21> 
Step:  142000, Reward: 751.413 [237.317], Avg: 432.574 (0.0556) <0-08:56:14> 
Step:  143000, Reward: 876.675 [32.132], Avg: 435.659 (0.0545) <0-08:59:11> 
Step:  144000, Reward: 886.293 [30.077], Avg: 438.766 (0.0534) <0-09:02:13> 
Step:  145000, Reward: 876.42 [63.295], Avg: 441.764 (0.0524) <0-09:04:58> 
Step:  146000, Reward: 884.948 [50.170], Avg: 444.779 (0.0513) <0-09:07:50> 
Step:  147000, Reward: 793.16 [176.860], Avg: 447.133 (0.0503) <0-09:10:47> 
Step:  148000, Reward: 840.126 [92.881], Avg: 449.77 (0.0493) <0-09:13:40> 
Step:  149000, Reward: 883.241 [28.195], Avg: 452.66 (0.0483) <0-09:16:46> 
Step:  150000, Reward: 867.217 [64.952], Avg: 455.406 (0.0473) <0-09:19:55> 
Step:  151000, Reward: 839.318 [103.974], Avg: 457.931 (0.0464) <0-09:22:49> 
Step:  152000, Reward: 713.431 [126.024], Avg: 459.601 (0.0455) <0-09:25:29> 
Step:  153000, Reward: 833.767 [100.969], Avg: 462.031 (0.0445) <0-09:28:41> 
Step:  154000, Reward: 718.579 [198.240], Avg: 463.686 (0.0437) <0-09:31:30> 
Step:  155000, Reward: 828.685 [87.988], Avg: 466.026 (0.0428) <0-09:34:26> 
Step:  156000, Reward: 870.664 [36.359], Avg: 468.603 (0.0419) <0-09:37:32> 
Step:  157000, Reward: 749.72 [201.811], Avg: 470.382 (0.0403) <0-09:40:36> 
