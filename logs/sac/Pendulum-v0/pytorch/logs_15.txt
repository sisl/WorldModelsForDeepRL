Model: <class 'models.singleagent.sac.SACAgent'>, Env: Pendulum-v0/pytorch, Date: 22/03/2020 01:07:40
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: b025925e1f9a3086994e1dac25e3b4ee44d689f2
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7f7011d9ce10>,

import gym
import torch
import random
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTQNetwork, PTCritic, MAX_BUFFER_SIZE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE, gsoftmax

LEARN_RATE = 0.0003
REPLAY_BATCH_SIZE = 128
TARGET_UPDATE_RATE = 0.001

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-10,1).exp()
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		action = gsoftmax(action, hard=False) if self.discrete else action
		log_prob = torch.log(action+1e-8) if self.discrete else dist.log_prob(action)
		log_prob -= torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"):
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, SACCritic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, next_states, rewards, dones, importances=torch.tensor(1.0), gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-10, 1).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q_nexts = self.get_q_value(next_states, next_actions, use_target=True) - alpha*next_log_prob
		q_nexts = (next_actions*q_nexts).mean(-1, keepdim=True) if self.discrete else q_nexts
		q_targets = rewards.unsqueeze(-1) + gamma * q_nexts * (1 - dones.unsqueeze(-1))

		q_values = self.get_q_value(states, actions, grad=True)
		q_values = q_values.gather(-1, actions.argmax(-1, keepdim=True))
		critic1_loss = (q_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True)
		actor_loss = alpha*log_prob - (q_actions - q_values.detach())
		actor_loss = actor_action * actor_loss if self.discrete else actor_loss
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters(), 5)
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: -1404.842 [253.318], Avg: -1404.842 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1182.89 [262.342], Avg: -1293.866 (1.0000) <0-00:00:15> 
Step:    2000, Reward: -1274.87 [234.360], Avg: -1287.534 (1.0000) <0-00:00:30> 
Step:    3000, Reward: -1456.153 [204.676], Avg: -1329.689 (1.0000) <0-00:00:46> 
Step:    4000, Reward: -1500.643 [182.850], Avg: -1363.88 (1.0000) <0-00:01:02> 
Step:    5000, Reward: -1652.576 [126.116], Avg: -1411.996 (1.0000) <0-00:01:19> 
Step:    6000, Reward: -1784.726 [94.701], Avg: -1465.243 (1.0000) <0-00:01:35> 
Step:    7000, Reward: -1713.26 [116.151], Avg: -1496.245 (1.0000) <0-00:01:51> 
Step:    8000, Reward: -1636.984 [122.968], Avg: -1511.883 (1.0000) <0-00:02:08> 
Step:    9000, Reward: -1573.378 [58.259], Avg: -1518.032 (1.0000) <0-00:02:24> 
Step:   10000, Reward: -1456.293 [95.329], Avg: -1512.42 (1.0000) <0-00:02:40> 
Step:   11000, Reward: -1432.019 [89.926], Avg: -1505.72 (1.0000) <0-00:02:57> 
Step:   12000, Reward: -1293.221 [341.679], Avg: -1489.373 (1.0000) <0-00:03:14> 
Step:   13000, Reward: -1135.893 [446.737], Avg: -1464.125 (1.0000) <0-00:03:31> 
Step:   14000, Reward: -1017.957 [511.442], Avg: -1434.38 (1.0000) <0-00:03:48> 
Step:   15000, Reward: -1120.47 [334.331], Avg: -1414.761 (1.0000) <0-00:04:04> 
Step:   16000, Reward: -963.669 [368.985], Avg: -1388.226 (1.0000) <0-00:04:20> 
Step:   17000, Reward: -871.257 [438.384], Avg: -1359.506 (1.0000) <0-00:04:37> 
Step:   18000, Reward: -698.757 [464.159], Avg: -1324.729 (1.0000) <0-00:04:54> 
Step:   19000, Reward: -929.367 [167.351], Avg: -1304.961 (1.0000) <0-00:05:11> 
Step:   20000, Reward: -992.514 [339.859], Avg: -1290.083 (1.0000) <0-00:05:27> 
Step:   21000, Reward: -969.627 [182.553], Avg: -1275.517 (1.0000) <0-00:05:44> 
Step:   22000, Reward: -676.624 [391.696], Avg: -1249.478 (1.0000) <0-00:06:00> 
Step:   23000, Reward: -1080.529 [274.617], Avg: -1242.438 (1.0000) <0-00:06:18> 
Step:   24000, Reward: -535.623 [282.970], Avg: -1214.166 (1.0000) <0-00:06:34> 
Step:   25000, Reward: -658.34 [282.084], Avg: -1192.788 (1.0000) <0-00:06:50> 
Step:   26000, Reward: -252.468 [135.173], Avg: -1157.961 (1.0000) <0-00:07:07> 
Step:   27000, Reward: -129.175 [105.035], Avg: -1121.219 (1.0000) <0-00:07:25> 
Step:   28000, Reward: -293.645 [275.937], Avg: -1092.682 (1.0000) <0-00:07:41> 
Step:   29000, Reward: -289.079 [333.860], Avg: -1065.895 (1.0000) <0-00:07:58> 
Step:   30000, Reward: -350.916 [444.925], Avg: -1042.831 (1.0000) <0-00:08:14> 
Step:   31000, Reward: -267.956 [332.062], Avg: -1018.616 (1.0000) <0-00:08:31> 
Step:   32000, Reward: -214.174 [341.675], Avg: -994.239 (1.0000) <0-00:08:48> 
Step:   33000, Reward: -151.676 [90.318], Avg: -969.458 (1.0000) <0-00:09:04> 
Step:   34000, Reward: -173.464 [121.514], Avg: -946.715 (1.0000) <0-00:09:20> 
Step:   35000, Reward: -164.024 [103.351], Avg: -924.974 (1.0000) <0-00:09:37> 
Step:   36000, Reward: -180.598 [99.263], Avg: -904.856 (1.0000) <0-00:09:54> 
Step:   37000, Reward: -171.403 [103.028], Avg: -885.554 (1.0000) <0-00:10:11> 
Step:   38000, Reward: -120.014 [84.922], Avg: -865.925 (1.0000) <0-00:10:27> 
Step:   39000, Reward: -132.963 [112.564], Avg: -847.601 (1.0000) <0-00:10:45> 
Step:   40000, Reward: -169.551 [97.094], Avg: -831.063 (1.0000) <0-00:11:01> 
Step:   41000, Reward: -188.281 [105.120], Avg: -815.759 (1.0000) <0-00:11:17> 
Step:   42000, Reward: -169.327 [82.548], Avg: -800.725 (1.0000) <0-00:11:33> 
Step:   43000, Reward: -164.141 [70.403], Avg: -786.258 (1.0000) <0-00:11:50> 
Step:   44000, Reward: -159.235 [88.803], Avg: -772.324 (1.0000) <0-00:12:07> 
Step:   45000, Reward: -178.293 [95.458], Avg: -759.41 (1.0000) <0-00:12:23> 
Step:   46000, Reward: -161.708 [111.423], Avg: -746.693 (1.0000) <0-00:12:40> 
Step:   47000, Reward: -162.396 [75.202], Avg: -734.52 (1.0000) <0-00:12:58> 
Step:   48000, Reward: -141.685 [62.349], Avg: -722.422 (1.0000) <0-00:13:14> 
Step:   49000, Reward: -155.57 [73.336], Avg: -711.084 (1.0000) <0-00:13:31> 
Step:   50000, Reward: -164.105 [92.173], Avg: -700.359 (1.0000) <0-00:13:48> 
