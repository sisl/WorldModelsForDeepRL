Model: <class 'models.singleagent.sac.SACAgent'>, Env: Pendulum-v0/pytorch, Date: 21/03/2020 22:29:05
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 38ab67dc76409712eddc813082a866150ac144b7
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7fe4d0bceba8>,

import gym
import torch
import random
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTQNetwork, MAX_BUFFER_SIZE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE

LEARN_RATE = 0.0003
REPLAY_BATCH_SIZE = 128
TARGET_UPDATE_RATE = 0.001

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-20,2).exp()
		# epsilon = torch.randn_like(action_sig)
		# action = action_mu + action_sig*epsilon if action is None else action
		# log_prob = torch.distributions.Normal(action_mu, action_sig).log_prob(action)
		# entropy = -torch.log(1-action.tanh().pow(2)+1e-6)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		log_prob = dist.log_prob(action) - torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"): 
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.qnetwork = PTQNetwork(state_size, action_size, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, use_second=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			network = self if not use_second else self.qnetwork
			critic = network.critic_local if not use_target else network.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, next_states, rewards, dones, importances=torch.tensor(1.0), gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-20, 2).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q1_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=False)
		q2_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=True)
		q_nexts = torch.min(q1_nexts, q2_nexts) - alpha*next_log_prob
		q_targets = rewards.unsqueeze(-1) + gamma * (1 - dones.unsqueeze(-1)) * q_nexts

		q1_values = self.get_q_value(next_states, next_actions, use_second=False, grad=True)
		critic1_loss = (q1_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters(), retain=True)
		self.soft_copy(self.critic_local, self.critic_target)

		q2_values = self.get_q_value(next_states, next_actions, use_second=True, grad=True)
		critic2_loss = (q2_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.qnetwork.critic_optimizer, critic2_loss.mean(), self.qnetwork.critic_local.parameters())
		self.soft_copy(self.qnetwork.critic_local, self.qnetwork.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q1_values = self.get_q_value(states, actor_action, use_second=False, grad=True)
		q2_values = self.get_q_value(states, actor_action, use_second=True, grad=True)
		actor_loss = alpha*log_prob - torch.min(q1_values, q2_values)
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters())
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: -1369.315 [235.323], Avg: -1369.315 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1429.359 [323.587], Avg: -1399.337 (1.0000) <0-00:00:25> 
Step:    2000, Reward: -1255.956 [294.534], Avg: -1351.5433333333333 (1.0000) <0-00:00:49> 
Step:    3000, Reward: -1105.217 [296.960], Avg: -1289.96175 (1.0000) <0-00:01:14> 
Step:    4000, Reward: -1189.24 [246.548], Avg: -1269.8174 (1.0000) <0-00:01:40> 
Step:    5000, Reward: -1266.33 [372.079], Avg: -1269.2361666666666 (1.0000) <0-00:02:04> 
Step:    6000, Reward: -1192.232 [209.673], Avg: -1258.2355714285713 (1.0000) <0-00:02:29> 
Step:    7000, Reward: -1152.266 [396.903], Avg: -1244.9893749999999 (1.0000) <0-00:02:55> 
Step:    8000, Reward: -1325.769 [390.732], Avg: -1253.9648888888887 (1.0000) <0-00:03:21> 
Step:    9000, Reward: -1232.352 [295.454], Avg: -1251.8036 (1.0000) <0-00:03:47> 
Step:   10000, Reward: -1143.658 [327.170], Avg: -1241.9721818181818 (1.0000) <0-00:04:11> 
Step:   11000, Reward: -1127.284 [242.234], Avg: -1232.4148333333333 (1.0000) <0-00:04:36> 
Step:   12000, Reward: -1300.022 [319.842], Avg: -1237.6153846153845 (1.0000) <0-00:05:00> 
Step:   13000, Reward: -1338.304 [323.562], Avg: -1244.8074285714285 (1.0000) <0-00:05:26> 
Step:   14000, Reward: -1373.564 [263.150], Avg: -1253.3911999999998 (1.0000) <0-00:05:52> 
Step:   15000, Reward: -1295.004 [263.103], Avg: -1255.992 (1.0000) <0-00:06:18> 
Step:   16000, Reward: -1208.413 [119.813], Avg: -1253.1932352941176 (1.0000) <0-00:06:42> 
Step:   17000, Reward: -1396.01 [219.192], Avg: -1261.1274999999998 (1.0000) <0-00:07:05> 
Step:   18000, Reward: -1271.799 [220.349], Avg: -1261.6891578947368 (1.0000) <0-00:07:28> 
Step:   19000, Reward: -1364.874 [352.460], Avg: -1266.8483999999999 (1.0000) <0-00:07:51> 
Step:   20000, Reward: -1128.923 [327.845], Avg: -1260.2805238095236 (1.0000) <0-00:08:15> 
Step:   21000, Reward: -1279.853 [386.763], Avg: -1261.1701818181816 (1.0000) <0-00:08:40> 
Step:   22000, Reward: -1448.256 [198.679], Avg: -1269.3043478260868 (1.0000) <0-00:09:04> 
Step:   23000, Reward: -1531.658 [107.574], Avg: -1280.23575 (1.0000) <0-00:09:28> 
Step:   24000, Reward: -1413.088 [199.462], Avg: -1285.5498400000001 (1.0000) <0-00:09:54> 
Step:   25000, Reward: -1433.453 [206.545], Avg: -1291.238423076923 (1.0000) <0-00:10:18> 
Step:   26000, Reward: -1394.651 [185.855], Avg: -1295.0685185185184 (1.0000) <0-00:10:43> 
Step:   27000, Reward: -1457.785 [174.178], Avg: -1300.8798214285714 (1.0000) <0-00:11:07> 
Step:   28000, Reward: -1414.916 [222.863], Avg: -1304.8121034482758 (1.0000) <0-00:11:32> 
Step:   29000, Reward: -1518.053 [148.586], Avg: -1311.9201333333333 (1.0000) <0-00:11:57> 
Step:   30000, Reward: -1474.383 [190.962], Avg: -1317.1608709677419 (1.0000) <0-00:12:21> 
Step:   31000, Reward: -1421.473 [222.004], Avg: -1320.420625 (1.0000) <0-00:12:46> 
Step:   32000, Reward: -1389.01 [236.320], Avg: -1322.499090909091 (1.0000) <0-00:13:11> 
Step:   33000, Reward: -1487.035 [158.909], Avg: -1327.3383823529414 (1.0000) <0-00:13:36> 
Step:   34000, Reward: -1387.045 [145.521], Avg: -1329.0442857142857 (1.0000) <0-00:14:00> 
Step:   35000, Reward: -1390.816 [228.685], Avg: -1330.7601666666667 (1.0000) <0-00:14:25> 
Step:   36000, Reward: -1409.951 [234.845], Avg: -1332.9004594594596 (1.0000) <0-00:14:49> 
Step:   37000, Reward: -1476.514 [149.028], Avg: -1336.679763157895 (1.0000) <0-00:15:14> 
Step:   38000, Reward: -1479.47 [165.641], Avg: -1340.3410512820515 (1.0000) <0-00:15:38> 
Step:   39000, Reward: -1434.255 [115.850], Avg: -1342.6888999999999 (1.0000) <0-00:16:03> 
Step:   40000, Reward: -1433.101 [121.785], Avg: -1344.8940731707316 (1.0000) <0-00:16:28> 
Step:   41000, Reward: -1378.142 [200.357], Avg: -1345.6856904761905 (1.0000) <0-00:16:52> 
Step:   42000, Reward: -1386.674 [147.052], Avg: -1346.6389069767442 (1.0000) <0-00:17:16> 
Step:   43000, Reward: -1375.316 [172.099], Avg: -1347.290659090909 (1.0000) <0-00:17:42> 
Step:   44000, Reward: -1408.962 [215.236], Avg: -1348.6611333333333 (1.0000) <0-00:18:07> 
Step:   45000, Reward: -1364.121 [150.324], Avg: -1348.9972173913043 (1.0000) <0-00:18:33> 
Step:   46000, Reward: -1260.782 [181.039], Avg: -1347.1202978723404 (1.0000) <0-00:18:59> 
Step:   47000, Reward: -1458.397 [119.055], Avg: -1349.4385624999998 (1.0000) <0-00:19:23> 
Step:   48000, Reward: -1415.299 [136.009], Avg: -1350.7826530612242 (1.0000) <0-00:19:48> 
Step:   49000, Reward: -1422.548 [160.451], Avg: -1352.2179599999997 (1.0000) <0-00:20:12> 
Step:   50000, Reward: -1341.485 [181.298], Avg: -1352.0075098039213 (1.0000) <0-00:20:37> 
