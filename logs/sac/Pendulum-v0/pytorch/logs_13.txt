Model: <class 'models.singleagent.sac.SACAgent'>, Env: Pendulum-v0/pytorch, Date: 22/03/2020 00:11:35
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 38ab67dc76409712eddc813082a866150ac144b7
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7f530a321c18>,

import gym
import torch
import random
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTQNetwork, MAX_BUFFER_SIZE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE

LEARN_RATE = 0.0003
REPLAY_BATCH_SIZE = 128
TARGET_UPDATE_RATE = 0.001

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-20,2).exp()
		# epsilon = torch.randn_like(action_sig)
		# action = action_mu + action_sig*epsilon if action is None else action
		# log_prob = torch.distributions.Normal(action_mu, action_sig).log_prob(action)
		# log_prob -= torch.log(1-action.tanh().pow(2)+1e-6)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		log_prob = dist.log_prob(action) - torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"): 
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.qnetwork = PTQNetwork(state_size, action_size, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, use_second=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			network = self if not use_second else self.qnetwork
			critic = network.critic_local if not use_target else network.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, next_states, rewards, dones, importances=torch.tensor(1.0), gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-20, 2).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q1_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=False)
		# q2_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=True)
		# q_nexts = torch.min(q1_nexts, q2_nexts) - alpha*next_log_prob
		q_nexts = q1_nexts - alpha*next_log_prob
		q_targets = rewards.unsqueeze(-1) + gamma * (1 - dones.unsqueeze(-1)) * q_nexts

		q1_values = self.get_q_value(states, actions, use_second=False, grad=True)
		critic1_loss = (q1_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters(), retain=True)
		self.soft_copy(self.critic_local, self.critic_target)

		# q2_values = self.get_q_value(states, actions, use_second=True, grad=True)
		# critic2_loss = (q2_values - q_targets.detach()).pow(2) * importances.to(self.device)
		# self.step(self.qnetwork.critic_optimizer, critic2_loss.mean(), self.qnetwork.critic_local.parameters())
		# self.soft_copy(self.qnetwork.critic_local, self.qnetwork.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q1_actions = self.get_q_value(states, actor_action, use_second=False, grad=True)
		# q2_actions = self.get_q_value(states, actor_action, use_second=True, grad=True)
		# actor_loss = alpha*log_prob - torch.min(q1_actions, q2_actions)
		actor_loss = alpha*log_prob - (q1_actions - q1_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters(), 5)
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: -1417.425 [262.307], Avg: -1417.425 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1346.014 [340.086], Avg: -1381.72 (1.0000) <0-00:00:15> 
Step:    2000, Reward: -1306.326 [296.736], Avg: -1356.588 (1.0000) <0-00:00:31> 
Step:    3000, Reward: -1364.729 [179.833], Avg: -1358.624 (1.0000) <0-00:00:47> 
Step:    4000, Reward: -1506.324 [177.057], Avg: -1388.164 (1.0000) <0-00:01:03> 
Step:    5000, Reward: -1553.175 [143.560], Avg: -1415.665 (1.0000) <0-00:01:17> 
Step:    6000, Reward: -1698.929 [122.294], Avg: -1456.132 (1.0000) <0-00:01:34> 
Step:    7000, Reward: -1726.991 [56.340], Avg: -1489.989 (1.0000) <0-00:01:51> 
Step:    8000, Reward: -1673.536 [48.681], Avg: -1510.383 (1.0000) <0-00:02:07> 
Step:    9000, Reward: -1642.722 [81.466], Avg: -1523.617 (1.0000) <0-00:02:23> 
Step:   10000, Reward: -1456.56 [115.877], Avg: -1517.521 (1.0000) <0-00:02:40> 
Step:   11000, Reward: -1135.108 [564.824], Avg: -1485.653 (1.0000) <0-00:02:57> 
Step:   12000, Reward: -1339.307 [104.694], Avg: -1474.396 (1.0000) <0-00:03:14> 
Step:   13000, Reward: -1134.194 [304.093], Avg: -1450.096 (1.0000) <0-00:03:30> 
Step:   14000, Reward: -988.871 [376.424], Avg: -1419.347 (1.0000) <0-00:03:46> 
Step:   15000, Reward: -999.518 [396.295], Avg: -1393.108 (1.0000) <0-00:04:02> 
Step:   16000, Reward: -1094.348 [331.913], Avg: -1375.534 (1.0000) <0-00:04:17> 
Step:   17000, Reward: -960.994 [286.917], Avg: -1352.504 (1.0000) <0-00:04:35> 
Step:   18000, Reward: -1086.394 [185.042], Avg: -1338.498 (1.0000) <0-00:04:51> 
Step:   19000, Reward: -1012.313 [315.527], Avg: -1322.189 (1.0000) <0-00:05:08> 
Step:   20000, Reward: -905.998 [211.372], Avg: -1302.37 (1.0000) <0-00:05:25> 
Step:   21000, Reward: -386.804 [385.322], Avg: -1260.754 (1.0000) <0-00:05:41> 
Step:   22000, Reward: -904.323 [249.096], Avg: -1245.257 (1.0000) <0-00:05:57> 
Step:   23000, Reward: -869.309 [416.192], Avg: -1229.592 (1.0000) <0-00:06:14> 
Step:   24000, Reward: -706.739 [318.929], Avg: -1208.678 (1.0000) <0-00:06:30> 
Step:   25000, Reward: -241.866 [118.686], Avg: -1171.493 (1.0000) <0-00:06:46> 
Step:   26000, Reward: -371.181 [140.142], Avg: -1141.852 (1.0000) <0-00:07:02> 
Step:   27000, Reward: -251.544 [242.418], Avg: -1110.055 (1.0000) <0-00:07:18> 
Step:   28000, Reward: -270.035 [147.201], Avg: -1081.089 (1.0000) <0-00:07:34> 
Step:   29000, Reward: -260.967 [342.029], Avg: -1053.751 (1.0000) <0-00:07:50> 
Step:   30000, Reward: -203.928 [90.351], Avg: -1026.338 (1.0000) <0-00:08:07> 
Step:   31000, Reward: -266.914 [335.670], Avg: -1002.606 (1.0000) <0-00:08:24> 
Step:   32000, Reward: -177.315 [126.156], Avg: -977.597 (1.0000) <0-00:08:40> 
Step:   33000, Reward: -156.785 [99.568], Avg: -953.455 (1.0000) <0-00:08:56> 
Step:   34000, Reward: -156.619 [81.802], Avg: -930.689 (1.0000) <0-00:09:13> 
Step:   35000, Reward: -169.363 [108.737], Avg: -909.541 (1.0000) <0-00:09:29> 
Step:   36000, Reward: -221.773 [344.780], Avg: -890.952 (1.0000) <0-00:09:46> 
Step:   37000, Reward: -198.648 [97.075], Avg: -872.734 (1.0000) <0-00:10:03> 
Step:   38000, Reward: -175.669 [109.360], Avg: -854.86 (1.0000) <0-00:10:19> 
Step:   39000, Reward: -144.962 [80.641], Avg: -837.113 (1.0000) <0-00:10:34> 
Step:   40000, Reward: -170.389 [82.494], Avg: -820.851 (1.0000) <0-00:10:51> 
Step:   41000, Reward: -153.827 [63.783], Avg: -804.97 (1.0000) <0-00:11:08> 
Step:   42000, Reward: -153.489 [97.895], Avg: -789.819 (1.0000) <0-00:11:24> 
Step:   43000, Reward: -173.426 [107.733], Avg: -775.81 (1.0000) <0-00:11:41> 
Step:   44000, Reward: -148.76 [94.652], Avg: -761.876 (1.0000) <0-00:11:58> 
Step:   45000, Reward: -165.896 [72.629], Avg: -748.92 (1.0000) <0-00:12:14> 
Step:   46000, Reward: -144.887 [87.288], Avg: -736.068 (1.0000) <0-00:12:31> 
Step:   47000, Reward: -127.973 [88.782], Avg: -723.399 (1.0000) <0-00:12:48> 
Step:   48000, Reward: -107.004 [83.184], Avg: -710.82 (1.0000) <0-00:13:04> 
Step:   49000, Reward: -123.004 [40.159], Avg: -699.064 (1.0000) <0-00:13:21> 
Step:   50000, Reward: -183.092 [88.900], Avg: -688.946 (1.0000) <0-00:13:37> 
