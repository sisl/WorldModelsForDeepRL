Model: <class 'models.singleagent.sac.SACAgent'>, Env: Pendulum-v0/pytorch, Date: 21/03/2020 23:03:08
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 38ab67dc76409712eddc813082a866150ac144b7
Branch: master

num_envs: 16,
state_size: (3,),
action_size: (1,),
action_space: Box(1,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7f668b2e8c18>,

import gym
import torch
import random
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTQNetwork, MAX_BUFFER_SIZE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE

LEARN_RATE = 0.0003
REPLAY_BATCH_SIZE = 256
TARGET_UPDATE_RATE = 0.001

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-20,2).exp()
		# epsilon = torch.randn_like(action_sig)
		# action = action_mu + action_sig*epsilon if action is None else action
		# log_prob = torch.distributions.Normal(action_mu, action_sig).log_prob(action)
		# entropy = -torch.log(1-action.tanh().pow(2)+1e-6)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		log_prob = dist.log_prob(action) - torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"): 
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.qnetwork = PTQNetwork(state_size, action_size, critic=critic, lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, use_second=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			network = self if not use_second else self.qnetwork
			critic = network.critic_local if not use_target else network.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, next_states, rewards, dones, importances=torch.tensor(1.0), gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-20, 2).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q1_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=False)
		q2_nexts = self.get_q_value(next_states, next_actions, use_target=True, use_second=True)
		q_nexts = torch.min(q1_nexts, q1_nexts) - alpha*next_log_prob
		q_targets = rewards.unsqueeze(-1) + gamma * (1 - dones.unsqueeze(-1)) * q_nexts

		q1_values = self.get_q_value(next_states, next_actions, use_second=False, grad=True)
		critic1_loss = (q1_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters(), retain=False)
		self.soft_copy(self.critic_local, self.critic_target)

		# q2_values = self.get_q_value(next_states, next_actions, use_second=True, grad=True)
		# critic2_loss = (q2_values - q_targets.detach()).pow(2) * importances.to(self.device)
		# self.step(self.qnetwork.critic_optimizer, critic2_loss.mean(), self.qnetwork.critic_local.parameters())
		# self.soft_copy(self.qnetwork.critic_local, self.qnetwork.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q1_values = self.get_q_value(states, actor_action, use_second=False, grad=True)
		q2_values = self.get_q_value(states, actor_action, use_second=True, grad=True)
		actor_loss = alpha*log_prob - torch.min(q1_values, q1_values)
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters(), 5)
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: -1145.702 [182.121], Avg: -1145.702 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -1210.828 [228.360], Avg: -1178.265 (1.0000) <0-00:00:17> 
Step:    2000, Reward: -1275.572 [300.707], Avg: -1210.701 (1.0000) <0-00:00:35> 
Step:    3000, Reward: -1228.86 [266.048], Avg: -1215.24 (1.0000) <0-00:00:53> 
Step:    4000, Reward: -1259.566 [396.558], Avg: -1224.106 (1.0000) <0-00:01:11> 
Step:    5000, Reward: -1228.975 [236.459], Avg: -1224.917 (1.0000) <0-00:01:31> 
Step:    6000, Reward: -1156.681 [255.109], Avg: -1215.169 (1.0000) <0-00:01:49> 
Step:    7000, Reward: -1200.68 [185.046], Avg: -1213.358 (1.0000) <0-00:02:09> 
Step:    8000, Reward: -1281.712 [281.790], Avg: -1220.953 (1.0000) <0-00:02:28> 
Step:    9000, Reward: -1352.476 [292.340], Avg: -1234.105 (1.0000) <0-00:02:47> 
Step:   10000, Reward: -1296.173 [296.504], Avg: -1239.748 (1.0000) <0-00:03:05> 
Step:   11000, Reward: -1235.289 [300.722], Avg: -1239.376 (1.0000) <0-00:03:24> 
Step:   12000, Reward: -1286.719 [256.487], Avg: -1243.018 (1.0000) <0-00:03:43> 
Step:   13000, Reward: -1255.513 [255.448], Avg: -1243.91 (1.0000) <0-00:04:02> 
Step:   14000, Reward: -1314.996 [156.817], Avg: -1248.649 (1.0000) <0-00:04:20> 
Step:   15000, Reward: -1345.003 [135.413], Avg: -1254.672 (1.0000) <0-00:04:38> 
Step:   16000, Reward: -1242.107 [218.888], Avg: -1253.932 (1.0000) <0-00:04:58> 
Step:   17000, Reward: -1321.882 [189.543], Avg: -1257.707 (1.0000) <0-00:05:15> 
Step:   18000, Reward: -1348.959 [222.506], Avg: -1262.51 (1.0000) <0-00:05:34> 
Step:   19000, Reward: -1240.676 [344.474], Avg: -1261.418 (1.0000) <0-00:05:54> 
Step:   20000, Reward: -1266.979 [236.253], Avg: -1261.683 (1.0000) <0-00:06:12> 
Step:   21000, Reward: -1421.141 [210.755], Avg: -1268.931 (1.0000) <0-00:06:31> 
Step:   22000, Reward: -1473.307 [174.940], Avg: -1277.817 (1.0000) <0-00:06:50> 
Step:   23000, Reward: -1267.077 [199.599], Avg: -1277.37 (1.0000) <0-00:07:09> 
Step:   24000, Reward: -1382.405 [238.581], Avg: -1281.571 (1.0000) <0-00:07:27> 
Step:   25000, Reward: -1325.262 [301.179], Avg: -1283.252 (1.0000) <0-00:07:47> 
Step:   26000, Reward: -1463.9 [198.958], Avg: -1289.942 (1.0000) <0-00:08:04> 
Step:   27000, Reward: -1461.976 [166.498], Avg: -1296.086 (1.0000) <0-00:08:24> 
Step:   28000, Reward: -1349.791 [227.223], Avg: -1297.938 (1.0000) <0-00:08:43> 
Step:   29000, Reward: -1286.051 [232.123], Avg: -1297.542 (1.0000) <0-00:09:02> 
Step:   30000, Reward: -1461.543 [252.510], Avg: -1302.832 (1.0000) <0-00:09:21> 
Step:   31000, Reward: -1387.181 [225.416], Avg: -1305.468 (1.0000) <0-00:09:41> 
Step:   32000, Reward: -1392.615 [229.252], Avg: -1308.109 (1.0000) <0-00:09:59> 
Step:   33000, Reward: -1410.675 [198.993], Avg: -1311.126 (1.0000) <0-00:10:18> 
Step:   34000, Reward: -1433.935 [158.905], Avg: -1314.634 (1.0000) <0-00:10:36> 
Step:   35000, Reward: -1370.276 [141.647], Avg: -1316.18 (1.0000) <0-00:10:55> 
Step:   36000, Reward: -1364.431 [246.361], Avg: -1317.484 (1.0000) <0-00:11:13> 
Step:   37000, Reward: -1377.541 [140.165], Avg: -1319.065 (1.0000) <0-00:11:33> 
Step:   38000, Reward: -1438.245 [233.729], Avg: -1322.121 (1.0000) <0-00:11:52> 
Step:   39000, Reward: -1460.354 [177.298], Avg: -1325.576 (1.0000) <0-00:12:11> 
Step:   40000, Reward: -1367.07 [121.073], Avg: -1326.588 (1.0000) <0-00:12:31> 
Step:   41000, Reward: -1424.284 [166.120], Avg: -1328.914 (1.0000) <0-00:12:50> 
Step:   42000, Reward: -1480.934 [139.012], Avg: -1332.45 (1.0000) <0-00:13:10> 
Step:   43000, Reward: -1393.192 [135.814], Avg: -1333.83 (1.0000) <0-00:13:29> 
Step:   44000, Reward: -1400.978 [158.917], Avg: -1335.322 (1.0000) <0-00:13:49> 
Step:   45000, Reward: -1373.957 [157.788], Avg: -1336.162 (1.0000) <0-00:14:08> 
Step:   46000, Reward: -1376.593 [132.915], Avg: -1337.023 (1.0000) <0-00:14:28> 
Step:   47000, Reward: -1398.136 [151.086], Avg: -1338.296 (1.0000) <0-00:14:47> 
Step:   48000, Reward: -1413.115 [110.763], Avg: -1339.823 (1.0000) <0-00:15:06> 
Step:   49000, Reward: -1415.217 [145.322], Avg: -1341.331 (1.0000) <0-00:15:25> 
Step:   50000, Reward: -1405.989 [160.867], Avg: -1342.598 (1.0000) <0-00:15:45> 
