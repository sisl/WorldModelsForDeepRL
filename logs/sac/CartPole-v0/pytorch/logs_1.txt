Model: <class 'models.singleagent.sac.SACAgent'>, Env: CartPole-v0/pytorch, Date: 22/03/2020 01:22:30
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: b025925e1f9a3086994e1dac25e3b4ee44d689f2
Branch: master

num_envs: 16,
state_size: (4,),
action_size: [2],
action_space: Discrete(2),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.RawStack object at 0x7fbcadb68e48>,

import gym
import torch
import random
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTQNetwork, PTCritic, MAX_BUFFER_SIZE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE, gsoftmax

LEARN_RATE = 0.0003
REPLAY_BATCH_SIZE = 128
TARGET_UPDATE_RATE = 0.001

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-10,1).exp()
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		action = gsoftmax(action, hard=False) if self.discrete else action
		log_prob = torch.log(action+1e-6) if self.discrete else dist.log_prob(action)
		log_prob -= torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"):
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, SACCritic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, next_states, rewards, dones, importances=torch.tensor(1.0), gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-10, 1).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q_nexts = self.get_q_value(next_states, next_actions, use_target=True) - alpha*next_log_prob
		q_nexts = (next_actions*q_nexts).mean(-1, keepdim=True) if self.discrete else q_nexts
		q_targets = rewards.unsqueeze(-1) + gamma * q_nexts * (1 - dones.unsqueeze(-1))

		q_values = self.get_q_value(states, actions, grad=True)
		q_values = q_values.gather(-1, actions.argmax(-1, keepdim=True)) if self.discrete else q_values
		critic1_loss = (q_values - q_targets.detach()).pow(2) * importances.to(self.device)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True)
		actor_loss = alpha*log_prob - (q_actions - q_values.detach())
		actor_loss = actor_action*actor_loss if self.discrete else actor_loss
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters())
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: 19.125 [7.745], Avg: 19.125 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 21.438 [10.840], Avg: 20.282 (1.0000) <0-00:00:14> 
Step:    2000, Reward: 23.938 [10.703], Avg: 21.5 (1.0000) <0-00:00:29> 
Step:    3000, Reward: 25.875 [10.252], Avg: 22.594 (1.0000) <0-00:00:44> 
Step:    4000, Reward: 18.188 [8.233], Avg: 21.713 (1.0000) <0-00:00:58> 
Step:    5000, Reward: 24.875 [12.747], Avg: 22.24 (1.0000) <0-00:01:13> 
Step:    6000, Reward: 26.438 [17.194], Avg: 22.84 (1.0000) <0-00:01:28> 
Step:    7000, Reward: 19.625 [8.774], Avg: 22.438 (1.0000) <0-00:01:42> 
Step:    8000, Reward: 31.438 [20.597], Avg: 23.438 (1.0000) <0-00:01:58> 
Step:    9000, Reward: 25.438 [15.008], Avg: 23.638 (1.0000) <0-00:02:13> 
Step:   10000, Reward: 28.375 [15.644], Avg: 24.068 (1.0000) <0-00:02:28> 
Step:   11000, Reward: 28.125 [14.370], Avg: 24.406 (1.0000) <0-00:02:43> 
Step:   12000, Reward: 29.062 [12.492], Avg: 24.765 (1.0000) <0-00:02:58> 
Step:   13000, Reward: 57.125 [24.579], Avg: 27.076 (1.0000) <0-00:03:14> 
Step:   14000, Reward: 86.688 [34.890], Avg: 31.05 (1.0000) <0-00:03:29> 
Step:   15000, Reward: 180.0 [19.675], Avg: 40.36 (1.0000) <0-00:03:44> 
Step:   16000, Reward: 173.188 [16.036], Avg: 48.173 (1.0000) <0-00:03:58> 
Step:   17000, Reward: 200.0 [0.000], Avg: 56.608 (1.0000) <0-00:04:14> 
Step:   18000, Reward: 193.125 [6.945], Avg: 63.793 (1.0000) <0-00:04:29> 
Step:   19000, Reward: 113.5 [4.650], Avg: 66.278 (1.0000) <0-00:04:44> 
Step:   20000, Reward: 200.0 [0.000], Avg: 72.646 (1.0000) <0-00:04:59> 
Step:   21000, Reward: 200.0 [0.000], Avg: 78.435 (1.0000) <0-00:05:14> 
Step:   22000, Reward: 200.0 [0.000], Avg: 83.72 (1.0000) <0-00:05:29> 
Step:   23000, Reward: 200.0 [0.000], Avg: 88.565 (1.0000) <0-00:05:43> 
Step:   24000, Reward: 185.25 [5.804], Avg: 92.433 (1.0000) <0-00:05:59> 
Step:   25000, Reward: 199.438 [1.499], Avg: 96.548 (1.0000) <0-00:06:15> 
Step:   26000, Reward: 200.0 [0.000], Avg: 100.38 (1.0000) <0-00:06:30> 
Step:   27000, Reward: 200.0 [0.000], Avg: 103.938 (1.0000) <0-00:06:46> 
Step:   28000, Reward: 200.0 [0.000], Avg: 107.25 (1.0000) <0-00:07:01> 
Step:   29000, Reward: 176.625 [8.373], Avg: 109.563 (1.0000) <0-00:07:15> 
Step:   30000, Reward: 136.0 [3.082], Avg: 110.415 (1.0000) <0-00:07:30> 
Step:   31000, Reward: 128.375 [4.456], Avg: 110.977 (1.0000) <0-00:07:45> 
Step:   32000, Reward: 200.0 [0.000], Avg: 113.674 (1.0000) <0-00:08:01> 
Step:   33000, Reward: 200.0 [0.000], Avg: 116.213 (1.0000) <0-00:08:15> 
Step:   34000, Reward: 200.0 [0.000], Avg: 118.607 (1.0000) <0-00:08:29> 
Step:   35000, Reward: 9.812 [0.950], Avg: 115.585 (1.0000) <0-00:08:45> 
Step:   36000, Reward: 9.312 [0.682], Avg: 112.713 (1.0000) <0-00:09:00> 
Step:   37000, Reward: 9.562 [0.609], Avg: 109.998 (1.0000) <0-00:09:16> 
Step:   38000, Reward: 9.312 [0.982], Avg: 107.417 (1.0000) <0-00:09:32> 
Step:   39000, Reward: 137.312 [5.359], Avg: 108.164 (1.0000) <0-00:09:47> 
Step:   40000, Reward: 120.625 [3.982], Avg: 108.468 (1.0000) <0-00:10:02> 
Step:   41000, Reward: 103.0 [3.182], Avg: 108.338 (1.0000) <0-00:10:18> 
Step:   42000, Reward: 126.625 [6.284], Avg: 108.763 (1.0000) <0-00:10:33> 
Step:   43000, Reward: 122.75 [4.684], Avg: 109.081 (1.0000) <0-00:10:48> 
Step:   44000, Reward: 200.0 [0.000], Avg: 111.101 (1.0000) <0-00:11:03> 
Step:   45000, Reward: 56.75 [4.323], Avg: 109.92 (1.0000) <0-00:11:18> 
Step:   46000, Reward: 9.375 [0.857], Avg: 107.781 (1.0000) <0-00:11:34> 
Step:   47000, Reward: 9.188 [0.808], Avg: 105.727 (1.0000) <0-00:11:50> 
Step:   48000, Reward: 111.562 [4.286], Avg: 105.846 (1.0000) <0-00:12:05> 
Step:   49000, Reward: 134.0 [5.500], Avg: 106.409 (1.0000) <0-00:12:20> 
Step:   50000, Reward: 155.5 [10.452], Avg: 107.371 (1.0000) <0-00:12:35> 
